using System;
using System.Collections.Generic;
using System.Linq;

namespace DakLakCoffeeSupplyChain.Common.Helpers
{
    public class StageFailureInfo
    {
        /// <summary>
        /// OrderIndex c·ªßa stage b·ªã fail (th·ª© t·ª± trong method)
        /// </summary>
        public int FailedOrderIndex { get; set; }
        
        /// <summary>
        /// StageId th·ª±c t·∫ø c·ªßa stage b·ªã fail (t·ª´ database)
        /// </summary>
        public int? FailedStageId { get; set; }
        
        /// <summary>
        /// T√™n stage b·ªã fail
        /// </summary>
        public string FailedStageName { get; set; } = string.Empty;
        
        /// <summary>
        /// Chi ti·∫øt v·∫•n ƒë·ªÅ
        /// </summary>
        public string FailureDetails { get; set; } = string.Empty;
        
        /// <summary>
        /// Khuy·∫øn ngh·ªã c·∫£i thi·ªán
        /// </summary>
        public string Recommendations { get; set; } = string.Empty;
        
        /// <summary>
        /// X√°c ƒë·ªãnh ƒë√¢y c√≥ ph·∫£i l√† failure comment kh√¥ng
        /// </summary>
        public bool IsFailure { get; set; }
        
        /// <summary>
        /// Danh s√°ch ti√™u ch√≠ b·ªã fail
        /// </summary>
        public List<FailedCriteria> FailedCriteria { get; set; } = new();
        
        /// <summary>
        /// L√Ω do kh√¥ng ƒë·∫°t ƒë∆∞·ª£c ch·ªçn
        /// </summary>
        public List<string> SelectedFailureReasons { get; set; } = new();
        
        /// <summary>
        /// ƒêi·ªÉm ƒë√°nh gi√° t·ªïng h·ª£p
        /// </summary>
        public decimal OverallScore { get; set; }
        
        // üîß DEPRECATED: Gi·ªØ l·∫°i ƒë·ªÉ backward compatibility
        [Obsolete("S·ª≠ d·ª•ng FailedOrderIndex thay th·∫ø")]
        public int? FailedStageId_Old => FailedOrderIndex;
    }
    
    public class FailedCriteria
    {
        /// <summary>
        /// ID ti√™u ch√≠
        /// </summary>
        public string CriteriaId { get; set; } = string.Empty;
        
        /// <summary>
        /// T√™n ti√™u ch√≠
        /// </summary>
        public string CriteriaName { get; set; } = string.Empty;
        
        /// <summary>
        /// Gi√° tr·ªã th·ª±c t·∫ø
        /// </summary>
        public decimal ActualValue { get; set; }
        
        /// <summary>
        /// Gi√° tr·ªã chu·∫©n
        /// </summary>
        public string ExpectedValue { get; set; } = string.Empty;
        
        /// <summary>
        /// ƒê∆°n v·ªã
        /// </summary>
        public string Unit { get; set; } = string.Empty;
        
        /// <summary>
        /// L√Ω do kh√¥ng ƒë·∫°t
        /// </summary>
        public string FailureReason { get; set; } = string.Empty;
    }

    public static class StageFailureParser
    {
        private const string FAILED_STAGE_ID_PREFIX = "FAILED_STAGE_ID:";
        private const string FAILED_STAGE_NAME_PREFIX = "FAILED_STAGE_NAME:";
        private const string DETAILS_PREFIX = "DETAILS:";
        private const string RECOMMENDATIONS_PREFIX = "RECOMMENDATIONS:";
        private const string FAILED_CRITERIA_PREFIX = "FAILED_CRITERIA:";
        private const string FAILURE_REASONS_PREFIX = "FAILURE_REASONS:";
        private const string OVERALL_SCORE_PREFIX = "OVERALL_SCORE:";

        /// <summary>
        /// Parse th√¥ng tin stage failure t·ª´ comments (phi√™n b·∫£n c·∫£i ti·∫øn)
        /// </summary>
        /// <param name="comments">Comments t·ª´ evaluation</param>
        /// <returns>StageFailureInfo ho·∫∑c null n·∫øu kh√¥ng ph·∫£i failure</returns>
        public static StageFailureInfo? ParseFailureFromComments(string? comments)
        {
            if (string.IsNullOrEmpty(comments) || !comments.Contains(FAILED_STAGE_ID_PREFIX))
                return null;

            try
            {
                var parts = comments.Split('|');
                
                var stageIdPart = parts.FirstOrDefault(p => p.StartsWith(FAILED_STAGE_ID_PREFIX));
                var stageNamePart = parts.FirstOrDefault(p => p.StartsWith(FAILED_STAGE_NAME_PREFIX));
                var detailsPart = parts.FirstOrDefault(p => p.StartsWith(DETAILS_PREFIX));
                var recommendationsPart = parts.FirstOrDefault(p => p.StartsWith(RECOMMENDATIONS_PREFIX));
                var failedCriteriaPart = parts.FirstOrDefault(p => p.StartsWith(FAILED_CRITERIA_PREFIX));
                var failureReasonsPart = parts.FirstOrDefault(p => p.StartsWith(FAILURE_REASONS_PREFIX));
                var overallScorePart = parts.FirstOrDefault(p => p.StartsWith(OVERALL_SCORE_PREFIX));

                if (stageIdPart == null) return null;

                var stageIdStr = stageIdPart.Replace(FAILED_STAGE_ID_PREFIX, "");
                if (!int.TryParse(stageIdStr, out int orderIndex))
                    return null;

                var failureInfo = new StageFailureInfo
                {
                    FailedOrderIndex = orderIndex,
                    FailedStageId = null, // S·∫Ω ƒë∆∞·ª£c set t·ª´ service
                    FailedStageName = stageNamePart?.Replace(FAILED_STAGE_NAME_PREFIX, "") ?? "",
                    FailureDetails = detailsPart?.Replace(DETAILS_PREFIX, "") ?? "",
                    Recommendations = recommendationsPart?.Replace(RECOMMENDATIONS_PREFIX, "") ?? "",
                    IsFailure = true
                };

                // Parse failed criteria
                if (!string.IsNullOrEmpty(failedCriteriaPart))
                {
                    failureInfo.FailedCriteria = ParseFailedCriteria(failedCriteriaPart.Replace(FAILED_CRITERIA_PREFIX, ""));
                }

                // Parse failure reasons
                if (!string.IsNullOrEmpty(failureReasonsPart))
                {
                    failureInfo.SelectedFailureReasons = ParseFailureReasons(failureReasonsPart.Replace(FAILURE_REASONS_PREFIX, ""));
                }

                // Parse overall score
                if (!string.IsNullOrEmpty(overallScorePart))
                {
                    var scoreStr = overallScorePart.Replace(OVERALL_SCORE_PREFIX, "");
                    if (decimal.TryParse(scoreStr, out decimal score))
                    {
                        failureInfo.OverallScore = score;
                    }
                }

                return failureInfo;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"DEBUG: Error parsing failure comment: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// T·∫°o format comments chu·∫©n cho failure (phi√™n b·∫£n c·∫£i ti·∫øn)
        /// </summary>
        /// <param name="orderIndex">OrderIndex c·ªßa stage b·ªã fail</param>
        /// <param name="stageName">T√™n stage b·ªã fail</param>
        /// <param name="details">Chi ti·∫øt v·∫•n ƒë·ªÅ</param>
        /// <param name="recommendations">Khuy·∫øn ngh·ªã</param>
        /// <param name="failedCriteria">Danh s√°ch ti√™u ch√≠ b·ªã fail</param>
        /// <param name="failureReasons">L√Ω do kh√¥ng ƒë·∫°t</param>
        /// <param name="overallScore">ƒêi·ªÉm t·ªïng h·ª£p</param>
        /// <returns>Comments format chu·∫©n</returns>
        public static string CreateFailureComment(
            int orderIndex, 
            string stageName, 
            string details, 
            string recommendations,
            List<FailedCriteria>? failedCriteria = null,
            List<string>? failureReasons = null,
            decimal overallScore = 0)
        {
            var comment = $"{FAILED_STAGE_ID_PREFIX}{orderIndex}|{FAILED_STAGE_NAME_PREFIX}{stageName}|{DETAILS_PREFIX}{details}|{RECOMMENDATIONS_PREFIX}{recommendations}";

            // Th√™m failed criteria
            if (failedCriteria != null && failedCriteria.Any())
            {
                var criteriaStr = string.Join(";", failedCriteria.Select(c => $"{c.CriteriaId}:{c.CriteriaName}:{c.ActualValue}:{c.ExpectedValue}:{c.Unit}:{c.FailureReason}"));
                comment += $"|{FAILED_CRITERIA_PREFIX}{criteriaStr}";
            }

            // Th√™m failure reasons
            if (failureReasons != null && failureReasons.Any())
            {
                var reasonsStr = string.Join(";", failureReasons);
                comment += $"|{FAILURE_REASONS_PREFIX}{reasonsStr}";
            }

            // Th√™m overall score
            comment += $"|{OVERALL_SCORE_PREFIX}{overallScore}";

            return comment;
        }

        /// <summary>
        /// T·∫°o failure comment t·ª´ ƒë√°nh gi√° ti√™u ch√≠ (phi√™n b·∫£n c·∫£i ti·∫øn)
        /// </summary>
        /// <param name="orderIndex">OrderIndex c·ªßa stage</param>
        /// <param name="stageName">T√™n stage</param>
        /// <param name="criteriaResults">K·∫øt qu·∫£ ƒë√°nh gi√° ti√™u ch√≠</param>
        /// <param name="selectedReasons">L√Ω do kh√¥ng ƒë·∫°t ƒë∆∞·ª£c ch·ªçn</param>
        /// <param name="selectedFailedCriteria">Ti√™u ch√≠ b·ªã fail ƒë∆∞·ª£c ch·ªçn c·ª• th·ªÉ</param>
        /// <returns>Comments format chu·∫©n</returns>
        public static string CreateFailureCommentFromEvaluation(
            int orderIndex,
            string stageName,
            List<(dynamic criteria, string result, decimal actualValue)> criteriaResults,
            List<string> selectedReasons,
            List<string>? selectedFailedCriteria = null)
        {
            var failedCriteria = criteriaResults
                .Where(x => x.result == "Fail")
                .Select(x => new FailedCriteria
                {
                    CriteriaId = x.criteria.criteriaId,
                    CriteriaName = x.criteria.criteriaName,
                    ActualValue = x.actualValue,
                    ExpectedValue = $"{x.criteria.minValue}-{x.criteria.maxValue}",
                    Unit = x.criteria.unit,
                    FailureReason = GetFailureReasonForCriteria(x.criteria, x.actualValue)
                })
                .ToList();

            var overallScore = CalculateOverallScore(criteriaResults.Select(x => (x.criteria, x.result)).ToList());
            
            // N·∫øu c√≥ ch·ªçn ti√™u ch√≠ c·ª• th·ªÉ th√¨ ch·ªâ l·∫•y nh·ªØng ti√™u ch√≠ ƒë√≥
            if (selectedFailedCriteria != null && selectedFailedCriteria.Any())
            {
                failedCriteria = failedCriteria.Where(c => selectedFailedCriteria.Contains(c.CriteriaName)).ToList();
            }
            
            var details = $"ƒê√°nh gi√° kh√¥ng ƒë·∫°t: {failedCriteria.Count}/{criteriaResults.Count} ti√™u ch√≠";
            var recommendations = "C·∫ßn c·∫£i thi·ªán c√°c ti√™u ch√≠ kh√¥ng ƒë·∫°t ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng";

            return CreateFailureComment(orderIndex, stageName, details, recommendations, failedCriteria, selectedReasons, overallScore);
        }

        /// <summary>
        /// T√≠nh ƒëi·ªÉm t·ªïng h·ª£p t·ª´ k·∫øt qu·∫£ ƒë√°nh gi√°
        /// </summary>
        /// <param name="criteriaResults">K·∫øt qu·∫£ ƒë√°nh gi√° ti√™u ch√≠</param>
        /// <returns>ƒêi·ªÉm t·ªïng h·ª£p</returns>
        public static decimal CalculateOverallScore(List<(dynamic criteria, string result)> criteriaResults)
        {
            if (!criteriaResults.Any()) return 0;

            var totalScore = 0m;
            var totalWeight = 0m;

            foreach (var (criteria, result) in criteriaResults)
            {
                var weight = criteria.weight ?? 0m;
                totalWeight += weight;

                if (result == "Pass")
                {
                    totalScore += weight * 100;
                }
                else
                {
                    totalScore += weight * 0;
                }
            }

            return totalWeight > 0 ? totalScore / totalWeight : 0;
        }

        /// <summary>
        /// L·∫•y th√¥ng tin stage v√† ti√™u ch√≠ ƒë·ªÉ hi·ªÉn th·ªã khi fail
        /// </summary>
        /// <param name="stageCode">M√£ stage</param>
        /// <returns>Th√¥ng tin stage v√† ti√™u ch√≠</returns>
        public static object GetStageFailureInfo(string stageCode)
        {
            var criteria = GetHardcodedCriteriaForStage(stageCode);
            var failureReasons = GetHardcodedFailureReasonsForStage(stageCode);
            
            return new
            {
                stageCode = stageCode,
                stageName = GetStageName(stageCode),
                criteria = criteria,
                failureReasons = failureReasons,
                totalCriteria = criteria.Count,
                totalFailureReasons = failureReasons.Count
            };
        }

        /// <summary>
        /// L·∫•y t√™n stage t·ª´ m√£ stage
        /// </summary>
        /// <param name="stageCode">M√£ stage</param>
        /// <returns>T√™n stage</returns>
        private static string GetStageName(string stageCode)
        {
            return stageCode.ToLower() switch
            {
                "harvest" => "Thu ho·∫°ch",
                "drying" => "Ph∆°i kh√¥",
                "hulling" => "Xay x√°t",
                "grading" => "Ph√¢n lo·∫°i",
                "fermentation" => "L√™n men",
                "washing" => "R·ª≠a s·∫°ch",
                "pulping" => "T√°ch v·ªè qu·∫£",
                "carbonic-ferment" => "L√™n men carbonic",
                _ => stageCode
            };
        }

        /// <summary>
        /// L·∫•y ti√™u ch√≠ ƒë√°nh gi√° hardcoded cho stage
        /// </summary>
        /// <param name="stageCode">M√£ stage</param>
        /// <returns>Danh s√°ch ti√™u ch√≠</returns>
        private static List<object> GetHardcodedCriteriaForStage(string stageCode)
        {
            return stageCode.ToLower() switch
            {
                "harvest" => new List<object>
                {
                    new { criteriaId = "HARVEST_001", criteriaName = "ƒê·ªô ch√≠n c·ªßa qu·∫£", criteriaType = "Visual", minValue = 80, maxValue = 100, targetValue = 95, unit = "%", weight = 0.3, isRequired = true, description = "T·ª∑ l·ªá qu·∫£ ch√≠n ƒë·ªè, kh√¥ng c√≥ qu·∫£ xanh" },
                    new { criteriaId = "HARVEST_002", criteriaName = "K√≠ch th∆∞·ªõc h·∫°t", criteriaType = "Physical", minValue = 15, maxValue = 20, targetValue = 17, unit = "mm", weight = 0.2, isRequired = true, description = "ƒê∆∞·ªùng k√≠nh h·∫°t c√† ph√™" },
                    new { criteriaId = "HARVEST_003", criteriaName = "T·ª∑ l·ªá h·∫°t l·ªói", criteriaType = "Quality", minValue = 0, maxValue = 5, targetValue = 2, unit = "%", weight = 0.25, isRequired = true, description = "H·∫°t b·ªã s√¢u, m·ªëc, v·ª°" },
                    new { criteriaId = "HARVEST_004", criteriaName = "ƒê·ªô ·∫©m", criteriaType = "Chemical", minValue = 60, maxValue = 70, targetValue = 65, unit = "%", weight = 0.25, isRequired = true, description = "ƒê·ªô ·∫©m c·ªßa qu·∫£ c√† ph√™" }
                },
                "drying" => new List<object>
                {
                    new { criteriaId = "DRYING_001", criteriaName = "ƒê·ªô ·∫©m cu·ªëi", criteriaType = "Chemical", minValue = 10, maxValue = 12, targetValue = 11, unit = "%", weight = 0.4, isRequired = true, description = "ƒê·ªô ·∫©m sau khi ph∆°i" },
                    new { criteriaId = "DRYING_002", criteriaName = "Nhi·ªát ƒë·ªô ph∆°i", criteriaType = "Physical", minValue = 25, maxValue = 35, targetValue = 30, unit = "¬∞C", weight = 0.3, isRequired = true, description = "Nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng ph∆°i" },
                    new { criteriaId = "DRYING_003", criteriaName = "Th·ªùi gian ph∆°i", criteriaType = "Process", minValue = 7, maxValue = 25, targetValue = 15, unit = "ng√†y", weight = 0.3, isRequired = true, description = "S·ªë ng√†y ph∆°i" }
                },
                "hulling" => new List<object>
                {
                    new { criteriaId = "HULLING_001", criteriaName = "T·ª∑ l·ªá h·∫°t v·ª°", criteriaType = "Quality", minValue = 0, maxValue = 3, targetValue = 1, unit = "%", weight = 0.4, isRequired = true, description = "H·∫°t b·ªã v·ª° trong qu√° tr√¨nh xay" },
                    new { criteriaId = "HULLING_002", criteriaName = "ƒê·ªô s·∫°ch v·ªè", criteriaType = "Visual", minValue = 95, maxValue = 100, targetValue = 98, unit = "%", weight = 0.3, isRequired = true, description = "T·ª∑ l·ªá v·ªè ƒë∆∞·ª£c t√°ch s·∫°ch" },
                    new { criteriaId = "HULLING_003", criteriaName = "K√≠ch th∆∞·ªõc h·∫°t ƒë·ªìng ƒë·ªÅu", criteriaType = "Physical", minValue = 85, maxValue = 100, targetValue = 95, unit = "%", weight = 0.3, isRequired = true, description = "T·ª∑ l·ªá h·∫°t c√≥ k√≠ch th∆∞·ªõc ƒë·ªìng ƒë·ªÅu" }
                },
                "grading" => new List<object>
                {
                    new { criteriaId = "GRADING_001", criteriaName = "ƒê·ªô ƒë·ªìng ƒë·ªÅu k√≠ch th∆∞·ªõc", criteriaType = "Physical", minValue = 90, maxValue = 100, targetValue = 95, unit = "%", weight = 0.35, isRequired = true, description = "T·ª∑ l·ªá h·∫°t c√πng k√≠ch c·ª°" },
                    new { criteriaId = "GRADING_002", criteriaName = "M√†u s·∫Øc ƒë·ªìng ƒë·ªÅu", criteriaType = "Visual", minValue = 85, maxValue = 100, targetValue = 95, unit = "%", weight = 0.25, isRequired = true, description = "T·ª∑ l·ªá h·∫°t c√πng m√†u s·∫Øc" },
                    new { criteriaId = "GRADING_003", criteriaName = "T·ª∑ l·ªá h·∫°t l·ªói", criteriaType = "Quality", minValue = 0, maxValue = 2, targetValue = 0.5, unit = "%", weight = 0.4, isRequired = true, description = "H·∫°t b·ªã ƒëen, m·ªëc, s√¢u" }
                },
                "fermentation" => new List<object>
                {
                    new { criteriaId = "FERMENT_001", criteriaName = "Th·ªùi gian l√™n men", criteriaType = "Process", minValue = 12, maxValue = 48, targetValue = 24, unit = "gi·ªù", weight = 0.4, isRequired = true, description = "Th·ªùi gian l√™n men" },
                    new { criteriaId = "FERMENT_002", criteriaName = "Nhi·ªát ƒë·ªô l√™n men", criteriaType = "Physical", minValue = 18, maxValue = 25, targetValue = 22, unit = "¬∞C", weight = 0.3, isRequired = true, description = "Nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng l√™n men" },
                    new { criteriaId = "FERMENT_003", criteriaName = "pH cu·ªëi", criteriaType = "Chemical", minValue = 4.5, maxValue = 5.5, targetValue = 5, unit = "", weight = 0.3, isRequired = true, description = "ƒê·ªô pH sau l√™n men" }
                },
                "washing" => new List<object>
                {
                    new { criteriaId = "WASH_001", criteriaName = "ƒê·ªô s·∫°ch b·ªÅ m·∫∑t", criteriaType = "Visual", minValue = 95, maxValue = 100, targetValue = 98, unit = "%", weight = 0.5, isRequired = true, description = "T·ª∑ l·ªá h·∫°t s·∫°ch b·ªÅ m·∫∑t" },
                    new { criteriaId = "WASH_002", criteriaName = "ƒê·ªô ·∫©m sau r·ª≠a", criteriaType = "Chemical", minValue = 50, maxValue = 60, targetValue = 55, unit = "%", weight = 0.5, isRequired = true, description = "ƒê·ªô ·∫©m h·∫°t sau r·ª≠a" }
                },
                "pulping" => new List<object>
                {
                    new { criteriaId = "PULPING_001", criteriaName = "T·ª∑ l·ªá t√°ch v·ªè th√†nh c√¥ng", criteriaType = "Quality", minValue = 95, maxValue = 100, targetValue = 98, unit = "%", weight = 0.4, isRequired = true, description = "T·ª∑ l·ªá qu·∫£ ƒë∆∞·ª£c t√°ch v·ªè ho√†n to√†n" },
                    new { criteriaId = "PULPING_002", criteriaName = "T·ª∑ l·ªá h·∫°t b·ªã t·ªïn th∆∞∆°ng", criteriaType = "Quality", minValue = 0, maxValue = 3, targetValue = 1, unit = "%", weight = 0.3, isRequired = true, description = "H·∫°t b·ªã v·ª°, n·ª©t trong qu√° tr√¨nh t√°ch" },
                    new { criteriaId = "PULPING_003", criteriaName = "NƒÉng su·∫•t t√°ch v·ªè", criteriaType = "Process", minValue = 200, maxValue = 800, targetValue = 500, unit = "kg/gi·ªù", weight = 0.3, isRequired = true, description = "Kh·ªëi l∆∞·ª£ng qu·∫£ ƒë∆∞·ª£c x·ª≠ l√Ω m·ªói gi·ªù" }
                },
                "carbonic-ferment" => new List<object>
                {
                    new { criteriaId = "CARBONIC_FERMENT_001", criteriaName = "Th·ªùi gian l√™n men carbonic", criteriaType = "Process", minValue = 12, maxValue = 48, targetValue = 24, unit = "gi·ªù", weight = 0.4, isRequired = true, description = "Th·ªùi gian l√™n men carbonic" },
                    new { criteriaId = "CARBONIC_FERMENT_002", criteriaName = "Nhi·ªát ƒë·ªô l√™n men carbonic", criteriaType = "Physical", minValue = 18, maxValue = 25, targetValue = 22, unit = "¬∞C", weight = 0.3, isRequired = true, description = "Nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng l√™n men carbonic" },
                    new { criteriaId = "CARBONIC_FERMENT_003", criteriaName = "pH cu·ªëi", criteriaType = "Chemical", minValue = 4.5, maxValue = 5.5, targetValue = 5.0, unit = "", weight = 0.3, isRequired = true, description = "ƒê·ªô pH sau l√™n men carbonic" }
                },
                _ => new List<object>()
            };
        }

        /// <summary>
        /// L·∫•y l√Ω do kh√¥ng ƒë·∫°t hardcoded cho stage
        /// </summary>
        /// <param name="stageCode">M√£ stage</param>
        /// <returns>Danh s√°ch l√Ω do</returns>
        private static List<object> GetHardcodedFailureReasonsForStage(string stageCode)
        {
            return stageCode.ToLower() switch
            {
                "harvest" => new List<object>
                {
                    new { reasonId = "HARVEST_FAIL_001", reasonCode = "UNRIPE_FRUITS", reasonName = "Qu·∫£ ch∆∞a ch√≠n ƒë·ªß", category = "Quality", severityLevel = 3, description = "T·ª∑ l·ªá qu·∫£ xanh qu√° cao (>20%)" },
                    new { reasonId = "HARVEST_FAIL_002", reasonCode = "DAMAGED_FRUITS", reasonName = "Qu·∫£ b·ªã h∆∞ h·ªèng", category = "Quality", severityLevel = 4, description = "Qu·∫£ b·ªã s√¢u, m·ªëc, v·ª°" },
                    new { reasonId = "HARVEST_FAIL_003", reasonCode = "WRONG_HARVEST_TIME", reasonName = "Th·ªùi ƒëi·ªÉm thu ho·∫°ch kh√¥ng ph√π h·ª£p", category = "Process", severityLevel = 2, description = "Thu ho·∫°ch qu√° s·ªõm ho·∫∑c qu√° mu·ªôn" }
                },
                "drying" => new List<object>
                {
                    new { reasonId = "DRYING_FAIL_001", reasonCode = "HIGH_MOISTURE", reasonName = "ƒê·ªô ·∫©m qu√° cao", category = "Quality", severityLevel = 4, description = "ƒê·ªô ·∫©m >12%, c·∫ßn ph∆°i th√™m" },
                    new { reasonId = "DRYING_FAIL_002", reasonCode = "OVER_DRYING", reasonName = "Ph∆°i qu√° kh√¥", category = "Quality", severityLevel = 3, description = "ƒê·ªô ·∫©m <10%, h·∫°t b·ªã kh√¥ qu√°" },
                    new { reasonId = "DRYING_FAIL_003", reasonCode = "INSUFFICIENT_DRYING_TIME", reasonName = "Th·ªùi gian ph∆°i kh√¥ng ƒë·ªß", category = "Process", severityLevel = 3, description = "Ph∆°i ch∆∞a ƒë·ªß ng√†y" },
                    new { reasonId = "DRYING_FAIL_004", reasonCode = "POOR_DRYING_CONDITIONS", reasonName = "ƒêi·ªÅu ki·ªán ph∆°i kh√¥ng t·ªët", category = "Process", severityLevel = 2, description = "Th·ªùi ti·∫øt ·∫©m, thi·∫øu n·∫Øng" }
                },
                "hulling" => new List<object>
                {
                    new { reasonId = "HULLING_FAIL_001", reasonCode = "HIGH_BREAKAGE_RATE", reasonName = "T·ª∑ l·ªá h·∫°t v·ª° cao", category = "Quality", severityLevel = 4, description = "T·ª∑ l·ªá h·∫°t v·ª° >3%" },
                    new { reasonId = "HULLING_FAIL_002", reasonCode = "INCOMPLETE_HULLING", reasonName = "T√°ch v·ªè kh√¥ng ho√†n to√†n", category = "Quality", severityLevel = 3, description = "C√≤n s√≥t v·ªè tr·∫•u" },
                    new { reasonId = "HULLING_FAIL_003", reasonCode = "EQUIPMENT_ISSUE", reasonName = "V·∫•n ƒë·ªÅ thi·∫øt b·ªã", category = "Equipment", severityLevel = 3, description = "M√°y xay kh√¥ng ho·∫°t ƒë·ªông t·ªët" }
                },
                "grading" => new List<object>
                {
                    new { reasonId = "GRADING_FAIL_001", reasonCode = "INCONSISTENT_SIZE", reasonName = "K√≠ch th∆∞·ªõc kh√¥ng ƒë·ªìng ƒë·ªÅu", category = "Quality", severityLevel = 3, description = "H·∫°t c√≥ k√≠ch th∆∞·ªõc kh√°c nhau" },
                    new { reasonId = "GRADING_FAIL_002", reasonCode = "COLOR_VARIATION", reasonName = "M√†u s·∫Øc kh√¥ng ƒë·ªìng ƒë·ªÅu", category = "Quality", severityLevel = 2, description = "H·∫°t c√≥ m√†u s·∫Øc kh√°c nhau" },
                    new { reasonId = "GRADING_FAIL_003", reasonCode = "HIGH_DEFECT_RATE", reasonName = "T·ª∑ l·ªá h·∫°t l·ªói cao", category = "Quality", severityLevel = 4, description = "Nhi·ªÅu h·∫°t b·ªã ƒëen, m·ªëc, s√¢u" }
                },
                "fermentation" => new List<object>
                {
                    new { reasonId = "FERMENT_FAIL_001", reasonCode = "OVER_FERMENTATION", reasonName = "L√™n men qu√° l√¢u", category = "Process", severityLevel = 4, description = "Th·ªùi gian l√™n men >48 gi·ªù" },
                    new { reasonId = "FERMENT_FAIL_002", reasonCode = "UNDER_FERMENTATION", reasonName = "L√™n men ch∆∞a ƒë·ªß", category = "Process", severityLevel = 3, description = "Th·ªùi gian l√™n men <12 gi·ªù" },
                    new { reasonId = "FERMENT_FAIL_003", reasonCode = "WRONG_TEMPERATURE", reasonName = "Nhi·ªát ƒë·ªô kh√¥ng ph√π h·ª£p", category = "Process", severityLevel = 3, description = "Nhi·ªát ƒë·ªô l√™n men kh√¥ng ƒë√∫ng" }
                },
                "washing" => new List<object>
                {
                    new { reasonId = "WASH_FAIL_001", reasonCode = "INCOMPLETE_CLEANING", reasonName = "R·ª≠a ch∆∞a s·∫°ch", category = "Quality", severityLevel = 3, description = "B·ªÅ m·∫∑t h·∫°t c√≤n b·∫©n" },
                    new { reasonId = "WASH_FAIL_002", reasonCode = "EXCESSIVE_MOISTURE", reasonName = "ƒê·ªô ·∫©m qu√° cao", category = "Quality", severityLevel = 2, description = "ƒê·ªô ·∫©m sau r·ª≠a >60%" },
                    new { reasonId = "WASH_FAIL_003", reasonCode = "WATER_QUALITY_ISSUE", reasonName = "Ch·∫•t l∆∞·ª£ng n∆∞·ªõc k√©m", category = "Process", severityLevel = 2, description = "N∆∞·ªõc r·ª≠a kh√¥ng s·∫°ch" }
                },
                "pulping" => new List<object>
                {
                    new { reasonId = "PULPING_FAIL_001", reasonCode = "INCOMPLETE_PULPING", reasonName = "T√°ch v·ªè kh√¥ng ho√†n to√†n", category = "Quality", severityLevel = 4, description = "T·ª∑ l·ªá t√°ch v·ªè <95%" },
                    new { reasonId = "PULPING_FAIL_002", reasonCode = "HIGH_DAMAGE_RATE", reasonName = "T·ª∑ l·ªá h·∫°t t·ªïn th∆∞∆°ng cao", category = "Quality", severityLevel = 4, description = "T·ª∑ l·ªá h·∫°t v·ª°, n·ª©t >3%" },
                    new { reasonId = "PULPING_FAIL_003", reasonCode = "LOW_PROCESSING_RATE", reasonName = "NƒÉng su·∫•t x·ª≠ l√Ω th·∫•p", category = "Process", severityLevel = 3, description = "NƒÉng su·∫•t <200 kg/gi·ªù" },
                    new { reasonId = "PULPING_FAIL_004", reasonCode = "EQUIPMENT_MAINTENANCE", reasonName = "Thi·∫øt b·ªã c·∫ßn b·∫£o tr√¨", category = "Equipment", severityLevel = 3, description = "M√°y t√°ch v·ªè ho·∫°t ƒë·ªông kh√¥ng t·ªët" }
                },
                "carbonic-ferment" => new List<object>
                {
                    new { reasonId = "CARBONIC_FERMENT_FAIL_001", reasonCode = "OVER_FERMENTATION", reasonName = "L√™n men carbonic qu√° l√¢u", category = "Process", severityLevel = 4, description = "Th·ªùi gian l√™n men carbonic >48 gi·ªù" },
                    new { reasonId = "CARBONIC_FERMENT_FAIL_002", reasonCode = "UNDER_FERMENTATION", reasonName = "L√™n men carbonic ch∆∞a ƒë·ªß", category = "Process", severityLevel = 3, description = "Th·ªùi gian l√™n men carbonic <12 gi·ªù" },
                    new { reasonId = "CARBONIC_FERMENT_FAIL_003", reasonCode = "WRONG_TEMPERATURE", reasonName = "Nhi·ªát ƒë·ªô l√™n men carbonic kh√¥ng ph√π h·ª£p", category = "Process", severityLevel = 3, description = "Nhi·ªát ƒë·ªô l√™n men carbonic kh√¥ng ƒë√∫ng" }
                },
                _ => new List<object>()
            };
        }

        /// <summary>
        /// Parse failed criteria t·ª´ string
        /// </summary>
        private static List<FailedCriteria> ParseFailedCriteria(string criteriaStr)
        {
            var result = new List<FailedCriteria>();
            
            if (string.IsNullOrEmpty(criteriaStr)) return result;

            var criteriaList = criteriaStr.Split(';');
            foreach (var criteria in criteriaList)
            {
                var parts = criteria.Split(':');
                if (parts.Length >= 6)
                {
                    result.Add(new FailedCriteria
                    {
                        CriteriaId = parts[0],
                        CriteriaName = parts[1],
                        ActualValue = decimal.TryParse(parts[2], out decimal actual) ? actual : 0,
                        ExpectedValue = parts[3],
                        Unit = parts[4],
                        FailureReason = parts[5]
                    });
                }
            }

            return result;
        }

        /// <summary>
        /// Parse failure reasons t·ª´ string
        /// </summary>
        private static List<string> ParseFailureReasons(string reasonsStr)
        {
            if (string.IsNullOrEmpty(reasonsStr)) return new List<string>();
            return reasonsStr.Split(';').ToList();
        }

        /// <summary>
        /// L·∫•y l√Ω do kh√¥ng ƒë·∫°t cho ti√™u ch√≠ c·ª• th·ªÉ
        /// </summary>
        private static string GetFailureReasonForCriteria(dynamic criteria, decimal actualValue)
        {
            var minValue = criteria.minValue ?? 0m;
            var maxValue = criteria.maxValue ?? 0m;
            
            if (actualValue < minValue)
                return $"Gi√° tr·ªã th·∫•p h∆°n chu·∫©n ({actualValue} < {minValue})";
            
            if (actualValue > maxValue)
                return $"Gi√° tr·ªã cao h∆°n chu·∫©n ({actualValue} > {maxValue})";
            
            return "Kh√¥ng ƒë·∫°t ti√™u ch√≠";
        }

        /// <summary>
        /// Ki·ªÉm tra xem comments c√≥ ch·ª©a th√¥ng tin failure kh√¥ng
        /// </summary>
        /// <param name="comments">Comments c·∫ßn ki·ªÉm tra</param>
        /// <returns>True n·∫øu l√† failure comment</returns>
        public static bool IsFailureComment(string? comments)
        {
            return !string.IsNullOrEmpty(comments) && comments.Contains(FAILED_STAGE_ID_PREFIX);
        }
    }
}
