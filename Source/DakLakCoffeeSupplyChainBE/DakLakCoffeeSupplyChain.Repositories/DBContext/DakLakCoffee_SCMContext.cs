// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using DakLakCoffeeSupplyChain.Repositories.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace DakLakCoffeeSupplyChain.Repositories.DBContext;

public partial class DakLakCoffee_SCMContext : DbContext
{
    public DakLakCoffee_SCMContext()
    {
    }

    public DakLakCoffee_SCMContext(DbContextOptions<DakLakCoffee_SCMContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AgriculturalExpert> AgriculturalExperts { get; set; }

    public virtual DbSet<BusinessBuyer> BusinessBuyers { get; set; }

    public virtual DbSet<BusinessManager> BusinessManagers { get; set; }

    public virtual DbSet<BusinessStaff> BusinessStaffs { get; set; }

    public virtual DbSet<CoffeeType> CoffeeTypes { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<ContractDeliveryBatch> ContractDeliveryBatches { get; set; }

    public virtual DbSet<ContractDeliveryItem> ContractDeliveryItems { get; set; }

    public virtual DbSet<ContractItem> ContractItems { get; set; }

    public virtual DbSet<CropProgress> CropProgresses { get; set; }

    public virtual DbSet<CropSeason> CropSeasons { get; set; }

    public virtual DbSet<CropSeasonDetail> CropSeasonDetails { get; set; }

    public virtual DbSet<CropStage> CropStages { get; set; }

    public virtual DbSet<CultivationRegistration> CultivationRegistrations { get; set; }

    public virtual DbSet<CultivationRegistrationsDetail> CultivationRegistrationsDetails { get; set; }

    public virtual DbSet<ExpertAdvice> ExpertAdvices { get; set; }

    public virtual DbSet<Farmer> Farmers { get; set; }

    public virtual DbSet<FarmingCommitment> FarmingCommitments { get; set; }

    public virtual DbSet<FarmingCommitmentsDetail> FarmingCommitmentsDetails { get; set; }

    public virtual DbSet<GeneralFarmerReport> GeneralFarmerReports { get; set; }

    public virtual DbSet<Inventory> Inventories { get; set; }

    public virtual DbSet<InventoryLog> InventoryLogs { get; set; }

    public virtual DbSet<MediaFile> MediaFiles { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderComplaint> OrderComplaints { get; set; }

    public virtual DbSet<OrderItem> OrderItems { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentConfiguration> PaymentConfigurations { get; set; }

    public virtual DbSet<ProcessingBatch> ProcessingBatches { get; set; }

    public virtual DbSet<ProcessingBatchEvaluation> ProcessingBatchEvaluations { get; set; }

    public virtual DbSet<ProcessingBatchProgress> ProcessingBatchProgresses { get; set; }

    public virtual DbSet<ProcessingBatchWaste> ProcessingBatchWastes { get; set; }

    public virtual DbSet<ProcessingMethod> ProcessingMethods { get; set; }

    public virtual DbSet<ProcessingParameter> ProcessingParameters { get; set; }

    public virtual DbSet<ProcessingStage> ProcessingStages { get; set; }

    public virtual DbSet<ProcessingWasteDisposal> ProcessingWasteDisposals { get; set; }

    public virtual DbSet<ProcurementPlan> ProcurementPlans { get; set; }

    public virtual DbSet<ProcurementPlansDetail> ProcurementPlansDetails { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Shipment> Shipments { get; set; }

    public virtual DbSet<ShipmentDetail> ShipmentDetails { get; set; }

    public virtual DbSet<SystemConfiguration> SystemConfigurations { get; set; }

    public virtual DbSet<SystemConfigurationUser> SystemConfigurationUsers { get; set; }

    public virtual DbSet<SystemNotification> SystemNotifications { get; set; }

    public virtual DbSet<SystemNotificationRecipient> SystemNotificationRecipients { get; set; }

    public virtual DbSet<UserAccount> UserAccounts { get; set; }

    public virtual DbSet<Wallet> Wallets { get; set; }

    public virtual DbSet<WalletTransaction> WalletTransactions { get; set; }

    public virtual DbSet<Warehouse> Warehouses { get; set; }

    public virtual DbSet<WarehouseInboundRequest> WarehouseInboundRequests { get; set; }

    public virtual DbSet<WarehouseOutboundReceipt> WarehouseOutboundReceipts { get; set; }

    public virtual DbSet<WarehouseOutboundRequest> WarehouseOutboundRequests { get; set; }

    public virtual DbSet<WarehouseReceipt> WarehouseReceipts { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            //.AddJsonFile("appsettings.Development.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);

        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"))
                         .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=ADMIN-PC;Initial Catalog=DakLakCoffee_SCM;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AgriculturalExpert>(entity =>
        {
            entity.HasKey(e => e.ExpertId).HasName("PK__Agricult__7EDB3A38BEBABEF6");

            entity.HasIndex(e => e.UserId, "UQ__Agricult__1788CCADDE1C0577").IsUnique();

            entity.HasIndex(e => e.ExpertCode, "UQ__Agricult__FAAD20A72125311C").IsUnique();

            entity.Property(e => e.ExpertId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ExpertID");
            entity.Property(e => e.AffiliatedOrganization).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpertCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExpertiseArea).HasMaxLength(255);
            entity.Property(e => e.IsVerified).HasDefaultValue(false);
            entity.Property(e => e.Qualifications).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithOne(p => p.AgriculturalExpert)
                .HasForeignKey<AgriculturalExpert>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AgriculturalExperts_UserID");
        });

        modelBuilder.Entity<BusinessBuyer>(entity =>
        {
            entity.HasKey(e => e.BuyerId).HasName("PK__Business__4B81C1CAD4D665AE");

            entity.HasIndex(e => e.BuyerCode, "UQ__Business__F658F187842B3385").IsUnique();

            entity.Property(e => e.BuyerId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("BuyerID");
            entity.Property(e => e.BuyerCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyAddress).HasMaxLength(255);
            entity.Property(e => e.CompanyName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.Position).HasMaxLength(50);
            entity.Property(e => e.TaxId)
                .HasMaxLength(50)
                .HasColumnName("TaxID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Website).HasMaxLength(255);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.BusinessBuyers)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessBuyers_CreatedBy");
        });

        modelBuilder.Entity<BusinessManager>(entity =>
        {
            entity.HasKey(e => e.ManagerId).HasName("PK__Business__3BA2AA8162F4DA9D");

            entity.HasIndex(e => e.ManagerCode, "UQ__Business__634BE7D1E9BB1464").IsUnique();

            entity.Property(e => e.ManagerId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ManagerID");
            entity.Property(e => e.BusinessLicenseUrl)
                .HasMaxLength(255)
                .HasColumnName("BusinessLicenseURL");
            entity.Property(e => e.CompanyAddress).HasMaxLength(255);
            entity.Property(e => e.CompanyName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ContactEmail).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Department).HasMaxLength(100);
            entity.Property(e => e.IsCompanyVerified).HasDefaultValue(false);
            entity.Property(e => e.ManagerCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Position).HasMaxLength(50);
            entity.Property(e => e.TaxId)
                .HasMaxLength(50)
                .HasColumnName("TaxID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Website).HasMaxLength(255);

            entity.HasOne(d => d.User).WithMany(p => p.BusinessManagers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessManagers_UserID");
        });

        modelBuilder.Entity<BusinessStaff>(entity =>
        {
            entity.HasKey(e => e.StaffId).HasName("PK__Business__96D4AAF776363156");

            entity.HasIndex(e => e.UserId, "UQ__Business__1788CCAD300C4C41").IsUnique();

            entity.HasIndex(e => e.StaffCode, "UQ__Business__D83AD812974EFC11").IsUnique();

            entity.Property(e => e.StaffId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("StaffID");
            entity.Property(e => e.AssignedWarehouseId).HasColumnName("AssignedWarehouseID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Department).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Position).HasMaxLength(100);
            entity.Property(e => e.StaffCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SupervisorId).HasColumnName("SupervisorID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.AssignedWarehouse).WithMany(p => p.BusinessStaffs)
                .HasForeignKey(d => d.AssignedWarehouseId)
                .HasConstraintName("FK_BusinessStaffs_Warehouse");

            entity.HasOne(d => d.Supervisor).WithMany(p => p.BusinessStaffs)
                .HasForeignKey(d => d.SupervisorId)
                .HasConstraintName("FK_BusinessStaffs_Supervisor");

            entity.HasOne(d => d.User).WithOne(p => p.BusinessStaff)
                .HasForeignKey<BusinessStaff>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessStaffs_UserID");
        });

        modelBuilder.Entity<CoffeeType>(entity =>
        {
            entity.HasKey(e => e.CoffeeTypeId).HasName("PK__CoffeeTy__3B5BEB64EC12603D");

            entity.HasIndex(e => e.TypeCode, "UQ__CoffeeTy__3E1CDC7C58A8DEFE").IsUnique();

            entity.Property(e => e.CoffeeTypeId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CoffeeTypeID");
            entity.Property(e => e.BotanicalName).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SpecialtyLevel).HasMaxLength(50);
            entity.Property(e => e.TypeCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.TypicalRegion).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => e.ContractId).HasName("PK__Contract__C90D34096CCA357F");

            entity.HasIndex(e => e.ContractCode, "UQ__Contract__CBECF8339BC5C481").IsUnique();

            entity.Property(e => e.ContractId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ContractID");
            entity.Property(e => e.BuyerId).HasColumnName("BuyerID");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContractFileUrl)
                .HasMaxLength(255)
                .HasColumnName("ContractFileURL");
            entity.Property(e => e.ContractNumber).HasMaxLength(100);
            entity.Property(e => e.ContractTitle).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SellerId).HasColumnName("SellerID");
            entity.Property(e => e.SignedAt).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("NotStarted");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Buyer).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.BuyerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contracts_BuyerID");

            entity.HasOne(d => d.Seller).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contracts_SellerID");
        });

        modelBuilder.Entity<ContractDeliveryBatch>(entity =>
        {
            entity.HasKey(e => e.DeliveryBatchId).HasName("PK__Contract__0E96BE56E763AF0D");

            entity.HasIndex(e => e.DeliveryBatchCode, "UQ__Contract__4F2E5F61A577C2FA").IsUnique();

            entity.Property(e => e.DeliveryBatchId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DeliveryBatchID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeliveryBatchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Planned");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractDeliveryBatches)
                .HasForeignKey(d => d.ContractId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractDeliveryBatches_ContractID");
        });

        modelBuilder.Entity<ContractDeliveryItem>(entity =>
        {
            entity.HasKey(e => e.DeliveryItemId).HasName("PK__Contract__6A62915DD442745B");

            entity.HasIndex(e => e.DeliveryItemCode, "UQ__Contract__48F2E595DFF01791").IsUnique();

            entity.Property(e => e.DeliveryItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DeliveryItemID");
            entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeliveryBatchId).HasColumnName("DeliveryBatchID");
            entity.Property(e => e.DeliveryItemCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FulfilledQuantity).HasDefaultValue(0.0);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ContractItem).WithMany(p => p.ContractDeliveryItems)
                .HasForeignKey(d => d.ContractItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractDeliveryItems_ContractItemID");

            entity.HasOne(d => d.DeliveryBatch).WithMany(p => p.ContractDeliveryItems)
                .HasForeignKey(d => d.DeliveryBatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractDeliveryItems_BatchID");
        });

        modelBuilder.Entity<ContractItem>(entity =>
        {
            entity.HasKey(e => e.ContractItemId).HasName("PK__Contract__18D3521505BDB434");

            entity.HasIndex(e => e.ContractItemCode, "UQ__Contract__83D4D8989D854257").IsUnique();

            entity.Property(e => e.ContractItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ContractItemID");
            entity.Property(e => e.CoffeeTypeId).HasColumnName("CoffeeTypeID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.ContractItemCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DiscountAmount).HasDefaultValue(0.0);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CoffeeType).WithMany(p => p.ContractItems)
                .HasForeignKey(d => d.CoffeeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractItems_CoffeeTypeID");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractItems)
                .HasForeignKey(d => d.ContractId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractItems_ContractID");
        });

        modelBuilder.Entity<CropProgress>(entity =>
        {
            entity.HasKey(e => e.ProgressId).HasName("PK__CropProg__BAE29C8586EEC7F3");

            entity.Property(e => e.ProgressId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ProgressID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CropSeasonDetailId).HasColumnName("CropSeasonDetailID");
            entity.Property(e => e.PhotoUrl)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StageId).HasColumnName("StageID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VideoUrl)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.CropSeasonDetail).WithMany(p => p.CropProgresses)
                .HasForeignKey(d => d.CropSeasonDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropProgresses_CropSeasonDetailID");

            entity.HasOne(d => d.Stage).WithMany(p => p.CropProgresses)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropProgresses_StageID");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.CropProgresses)
                .HasForeignKey(d => d.UpdatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropProgresses_UpdatedBy");
        });

        modelBuilder.Entity<CropSeason>(entity =>
        {
            entity.HasKey(e => e.CropSeasonId).HasName("PK__CropSeas__675AF5E0FD619085");

            entity.HasIndex(e => e.CropSeasonCode, "UQ__CropSeas__D31201518DD201C5").IsUnique();

            entity.Property(e => e.CropSeasonId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CropSeasonID");
            entity.Property(e => e.CommitmentId).HasColumnName("CommitmentID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CropSeasonCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FarmerId).HasColumnName("FarmerID");
            entity.Property(e => e.SeasonName).HasMaxLength(100);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Commitment).WithMany(p => p.CropSeasons)
                .HasForeignKey(d => d.CommitmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropSeasons_CommitmentID");

            entity.HasOne(d => d.Farmer).WithMany(p => p.CropSeasons)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropSeasons_FarmerID");
        });

        modelBuilder.Entity<CropSeasonDetail>(entity =>
        {
            entity.HasKey(e => e.DetailId).HasName("PK__CropSeas__135C314D98A7AC24");

            entity.Property(e => e.DetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DetailID");
            entity.Property(e => e.CommitmentDetailId).HasColumnName("CommitmentDetailID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CropSeasonId).HasColumnName("CropSeasonID");
            entity.Property(e => e.PlannedQuality).HasMaxLength(50);
            entity.Property(e => e.QualityGrade).HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Planned");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CommitmentDetail).WithMany(p => p.CropSeasonDetails)
                .HasForeignKey(d => d.CommitmentDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropSeasonDetails_CommitmentDetailID");

            entity.HasOne(d => d.CropSeason).WithMany(p => p.CropSeasonDetails)
                .HasForeignKey(d => d.CropSeasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropSeasonDetails_CropSeasonID");
        });

        modelBuilder.Entity<CropStage>(entity =>
        {
            entity.HasKey(e => e.StageId).HasName("PK__CropStag__03EB7AF887FE104F");

            entity.HasIndex(e => e.StageCode, "UQ__CropStag__7BFA4BE3310EE9BA").IsUnique();

            entity.Property(e => e.StageId).HasColumnName("StageID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.StageCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StageName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<CultivationRegistration>(entity =>
        {
            entity.HasKey(e => e.RegistrationId).HasName("PK__Cultivat__6EF58830EA9633EE");

            entity.HasIndex(e => e.RegistrationCode, "UQ__Cultivat__A94D9FED89337500").IsUnique();

            entity.Property(e => e.RegistrationId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RegistrationID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FarmerId).HasColumnName("FarmerID");
            entity.Property(e => e.PlanId).HasColumnName("PlanID");
            entity.Property(e => e.RegisteredAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RegistrationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Farmer).WithMany(p => p.CultivationRegistrations)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CultivationRegistrations_Farmers");

            entity.HasOne(d => d.Plan).WithMany(p => p.CultivationRegistrations)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CultivationRegistrations_ProcurementPlans");
        });

        modelBuilder.Entity<CultivationRegistrationsDetail>(entity =>
        {
            entity.HasKey(e => e.CultivationRegistrationDetailId).HasName("PK__Cultivat__B9AC84A659F29789");

            entity.ToTable("CultivationRegistrationsDetail");

            entity.Property(e => e.CultivationRegistrationDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CultivationRegistrationDetailID");
            entity.Property(e => e.ApprovedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PlanDetailId).HasColumnName("PlanDetailID");
            entity.Property(e => e.RegistrationId).HasColumnName("RegistrationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.CultivationRegistrationsDetails)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK_CultivationRegistrationsDetail_ApprovedBy");

            entity.HasOne(d => d.PlanDetail).WithMany(p => p.CultivationRegistrationsDetails)
                .HasForeignKey(d => d.PlanDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CultivationRegistrationsDetail_ProcurementPlansDetails");

            entity.HasOne(d => d.Registration).WithMany(p => p.CultivationRegistrationsDetails)
                .HasForeignKey(d => d.RegistrationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CultivationRegistrationsDetail_CultivationRegistrations");
        });

        modelBuilder.Entity<ExpertAdvice>(entity =>
        {
            entity.HasKey(e => e.AdviceId).HasName("PK__ExpertAd__4C842CE99D6EE301");

            entity.ToTable("ExpertAdvice");

            entity.Property(e => e.AdviceId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("AdviceID");
            entity.Property(e => e.AdviceSource)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("human");
            entity.Property(e => e.AttachedFileUrl)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpertId).HasColumnName("ExpertID");
            entity.Property(e => e.ReportId).HasColumnName("ReportID");
            entity.Property(e => e.ResponseType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Expert).WithMany(p => p.ExpertAdvices)
                .HasForeignKey(d => d.ExpertId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GeneralExpertAdvice_Expert");

            entity.HasOne(d => d.Report).WithMany(p => p.ExpertAdvices)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GeneralExpertAdvice_Report");
        });

        modelBuilder.Entity<Farmer>(entity =>
        {
            entity.HasKey(e => e.FarmerId).HasName("PK__Farmers__731B88E8952F08ED");

            entity.HasIndex(e => e.FarmerCode, "UQ__Farmers__F4EF70625367DAB4").IsUnique();

            entity.Property(e => e.FarmerId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("FarmerID");
            entity.Property(e => e.CertificationStatus).HasMaxLength(100);
            entity.Property(e => e.CertificationUrl)
                .HasMaxLength(255)
                .HasColumnName("CertificationURL");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FarmLocation).HasMaxLength(255);
            entity.Property(e => e.FarmerCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsVerified).HasDefaultValue(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Farmers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Farmers_UserID");
        });

        modelBuilder.Entity<FarmingCommitment>(entity =>
        {
            entity.HasKey(e => e.CommitmentId).HasName("PK__FarmingC__5360E89744197FB6");

            entity.HasIndex(e => e.CommitmentCode, "UQ__FarmingC__04FF0566F6DA4A8C").IsUnique();

            entity.HasIndex(e => e.RegistrationId, "UQ__FarmingC__6EF58831ADE42FD8").IsUnique();

            entity.Property(e => e.CommitmentId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CommitmentID");
            entity.Property(e => e.ApprovedAt).HasColumnType("datetime");
            entity.Property(e => e.CommitmentCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CommitmentDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FarmerId).HasColumnName("FarmerID");
            entity.Property(e => e.PlanId).HasColumnName("PlanID");
            entity.Property(e => e.ProgressPercentage).HasDefaultValue(0.0);
            entity.Property(e => e.RegistrationId).HasColumnName("RegistrationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.TotalAdvancePayment).HasDefaultValue(0.0);
            entity.Property(e => e.TotalPrice).HasDefaultValue(0.0);
            entity.Property(e => e.TotalRatingByBusiness).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.TotalRatingByFarmer).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.TotalTaxPrice).HasDefaultValue(0.0);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.FarmingCommitments)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK_FarmingCommitments_ApprovedBy");

            entity.HasOne(d => d.Farmer).WithMany(p => p.FarmingCommitments)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FarmingCommitments_FarmerID");

            entity.HasOne(d => d.Plan).WithMany(p => p.FarmingCommitments)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FarmingCommitments_PlanID");

            entity.HasOne(d => d.Registration).WithOne(p => p.FarmingCommitment)
                .HasForeignKey<FarmingCommitment>(d => d.RegistrationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FarmingCommitments_RegistrationID");
        });

        modelBuilder.Entity<FarmingCommitmentsDetail>(entity =>
        {
            entity.HasKey(e => e.CommitmentDetailId).HasName("PK__FarmingC__E043A8598902ECE9");

            entity.HasIndex(e => e.CommitmentDetailCode, "UQ__FarmingC__E7E39EA666FEF818").IsUnique();

            entity.Property(e => e.CommitmentDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CommitmentDetailID");
            entity.Property(e => e.AdvancePayment).HasDefaultValue(0.0);
            entity.Property(e => e.BreachedAt).HasColumnType("datetime");
            entity.Property(e => e.CommitmentDetailCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CommitmentId).HasColumnName("CommitmentID");
            entity.Property(e => e.ContractDeliveryItemId).HasColumnName("ContractDeliveryItemID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeliveriedQuantity).HasDefaultValue(0.0);
            entity.Property(e => e.PlanDetailId).HasColumnName("PlanDetailID");
            entity.Property(e => e.ProgressPercentage).HasDefaultValue(0.0);
            entity.Property(e => e.RatingByBusiness).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.RatingByFarmer).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.RegistrationDetailId).HasColumnName("RegistrationDetailID");
            entity.Property(e => e.RejectionAt).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.TaxPrice).HasDefaultValue(0.0);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.BreachedByNavigation).WithMany(p => p.FarmingCommitmentsDetailBreachedByNavigations)
                .HasForeignKey(d => d.BreachedBy)
                .HasConstraintName("FK_FarmingCommitmentsDetails_BreachedBy");

            entity.HasOne(d => d.Commitment).WithMany(p => p.FarmingCommitmentsDetails)
                .HasForeignKey(d => d.CommitmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FarmingCommitmentsDetails_CommitmentID");

            entity.HasOne(d => d.ContractDeliveryItem).WithMany(p => p.FarmingCommitmentsDetails)
                .HasForeignKey(d => d.ContractDeliveryItemId)
                .HasConstraintName("FK_FarmingCommitmentsDetails_ContractDeliveryItem");

            entity.HasOne(d => d.PlanDetail).WithMany(p => p.FarmingCommitmentsDetails)
                .HasForeignKey(d => d.PlanDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FarmingCommitmentsDetails_PlanDetailID");

            entity.HasOne(d => d.RegistrationDetail).WithMany(p => p.FarmingCommitmentsDetails)
                .HasForeignKey(d => d.RegistrationDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FarmingCommitmentsDetails_RegistrationDetailID");

            entity.HasOne(d => d.RejectionByNavigation).WithMany(p => p.FarmingCommitmentsDetailRejectionByNavigations)
                .HasForeignKey(d => d.RejectionBy)
                .HasConstraintName("FK_FarmingCommitmentsDetails_RejectionBy");
        });

        modelBuilder.Entity<GeneralFarmerReport>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK__GeneralF__D5BD48E5A656A739");

            entity.HasIndex(e => e.ReportCode, "UQ__GeneralF__0EDCD614EFAB5D38").IsUnique();

            entity.Property(e => e.ReportId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReportID");
            entity.Property(e => e.CropProgressId).HasColumnName("CropProgressID");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IsResolved).HasDefaultValue(false);
            entity.Property(e => e.ProcessingProgressId).HasColumnName("ProcessingProgressID");
            entity.Property(e => e.ReportCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReportType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReportedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ResolvedAt).HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VideoUrl)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.CropProgress).WithMany(p => p.GeneralFarmerReports)
                .HasForeignKey(d => d.CropProgressId)
                .HasConstraintName("FK_GeneralReports_CropProgress");

            entity.HasOne(d => d.ProcessingProgress).WithMany(p => p.GeneralFarmerReports)
                .HasForeignKey(d => d.ProcessingProgressId)
                .HasConstraintName("FK_GeneralReports_ProcessingProgress");

            entity.HasOne(d => d.ReportedByNavigation).WithMany(p => p.GeneralFarmerReports)
                .HasForeignKey(d => d.ReportedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GeneralReports_ReportedBy");
        });

        modelBuilder.Entity<Inventory>(entity =>
        {
            entity.HasKey(e => e.InventoryId).HasName("PK__Inventor__F5FDE6D3ECDF98F4");

            entity.HasIndex(e => e.InventoryCode, "UQ__Inventor__E1E5B5D8BD8797BA").IsUnique();

            entity.Property(e => e.InventoryId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("InventoryID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DetailId).HasColumnName("DetailID");
            entity.Property(e => e.InventoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsGreen).HasComputedColumnSql("(case when [BatchID] IS NOT NULL then CONVERT([bit],(1)) else CONVERT([bit],(0)) end)", true);
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasDefaultValue("Kg");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");

            entity.HasOne(d => d.Batch).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.BatchId)
                .HasConstraintName("FK_Inventories_Batch");

            entity.HasOne(d => d.Detail).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.DetailId)
                .HasConstraintName("FK_Inventories_CropSeasonDetails");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Inventories_Warehouse");
        });

        modelBuilder.Entity<InventoryLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK__Inventor__5E5499A8604A5E51");

            entity.Property(e => e.LogId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("LogID");
            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.LoggedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.TriggeredBySystem).HasDefaultValue(false);

            entity.HasOne(d => d.Inventory).WithMany(p => p.InventoryLogs)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryLogs_Inventory");
        });

        modelBuilder.Entity<MediaFile>(entity =>
        {
            entity.HasKey(e => e.MediaId).HasName("PK__MediaFil__B2C2B5AF232D8A01");

            entity.Property(e => e.MediaId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("MediaID");
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MediaType)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MediaUrl)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MediaURL");
            entity.Property(e => e.RelatedEntity)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RelatedId).HasColumnName("RelatedID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UploadedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Orders__C3905BAFF706F118");

            entity.HasIndex(e => e.OrderCode, "UQ__Orders__999B5229D40C42B0").IsUnique();

            entity.Property(e => e.OrderId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OrderID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeliveryBatchId).HasColumnName("DeliveryBatchID");
            entity.Property(e => e.InvoiceFileUrl)
                .HasMaxLength(255)
                .HasColumnName("InvoiceFileURL");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(100);
            entity.Property(e => e.LastPaidAt).HasColumnType("datetime");
            entity.Property(e => e.OrderCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.PaidPercent)
                .HasComputedColumnSql("(case when isnull([TotalAmount],(0))=(0) then CONVERT([decimal](5,2),(0.00)) else CONVERT([decimal](5,2),round((CONVERT([decimal](19,2),[PaidAmount])/nullif(CONVERT([decimal](19,2),[TotalAmount]),(0)))*(100.0),(2))) end)", false)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.PaymentProgressJson).HasColumnName("PaymentProgressJSON");
            entity.Property(e => e.PaymentStatus)
                .IsRequired()
                .HasMaxLength(13)
                .HasComputedColumnSql("(case when isnull([TotalAmount],(0))=(0) then N'Unpriced' when [PaidAmount]<=(0) then N'Unpaid' when CONVERT([decimal](19,2),[PaidAmount])<CONVERT([decimal](19,2),[TotalAmount]) then N'PartiallyPaid' else N'Paid' end)", false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_CreatedBy");

            entity.HasOne(d => d.DeliveryBatch).WithMany(p => p.Orders)
                .HasForeignKey(d => d.DeliveryBatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_DeliveryBatchID");
        });

        modelBuilder.Entity<OrderComplaint>(entity =>
        {
            entity.HasKey(e => e.ComplaintId).HasName("PK__OrderCom__740D89AF56872F73");

            entity.HasIndex(e => e.ComplaintCode, "UQ__OrderCom__8144A1BAF8634951").IsUnique();

            entity.Property(e => e.ComplaintId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ComplaintID");
            entity.Property(e => e.ComplaintCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ComplaintType).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EvidenceUrl)
                .HasMaxLength(255)
                .HasColumnName("EvidenceURL");
            entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");
            entity.Property(e => e.ResolvedAt).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Open");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderComplaints)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderComplaints_CreatedBy");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.OrderComplaints)
                .HasForeignKey(d => d.OrderItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderComplaints_OrderItemID");

            entity.HasOne(d => d.RaisedByNavigation).WithMany(p => p.OrderComplaints)
                .HasForeignKey(d => d.RaisedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderComplaints_RaisedBy");

            entity.HasOne(d => d.ResolvedByNavigation).WithMany(p => p.OrderComplaints)
                .HasForeignKey(d => d.ResolvedBy)
                .HasConstraintName("FK_OrderComplaints_ResolvedBy");
        });

        modelBuilder.Entity<OrderItem>(entity =>
        {
            entity.HasKey(e => e.OrderItemId).HasName("PK__OrderIte__57ED06A1F8834EC3");

            entity.Property(e => e.OrderItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OrderItemID");
            entity.Property(e => e.ContractDeliveryItemId).HasColumnName("ContractDeliveryItemID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DiscountAmount).HasDefaultValue(0.0);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ContractDeliveryItem).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.ContractDeliveryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderItems_ContractDeliveryItemID");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderItems_OrderID");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderItems_ProductID");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payments__9B556A5883EE3650");

            entity.HasIndex(e => e.PaymentCode, "UQ__Payments__106D3BA83EAB756B").IsUnique();

            entity.Property(e => e.PaymentId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PaymentID");
            entity.Property(e => e.AdminVerified).HasDefaultValue(false);
            entity.Property(e => e.ConfigId).HasColumnName("ConfigID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PaymentCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            entity.Property(e => e.PaymentPurpose).HasMaxLength(100);
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.PaymentTime).HasColumnType("datetime");
            entity.Property(e => e.RefundTime).HasColumnType("datetime");
            entity.Property(e => e.RelatedEntityId).HasColumnName("RelatedEntityID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Config).WithMany(p => p.Payments)
                .HasForeignKey(d => d.ConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Payments_Config");

            entity.HasOne(d => d.User).WithMany(p => p.Payments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_RegistrationPayments_UserID");
        });

        modelBuilder.Entity<PaymentConfiguration>(entity =>
        {
            entity.HasKey(e => e.ConfigId).HasName("PK__PaymentC__C3BC333C92646D1D");

            entity.Property(e => e.ConfigId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ConfigID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.FeeType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Role).WithMany(p => p.PaymentConfigurations)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentConfigurations_Role");
        });

        modelBuilder.Entity<ProcessingBatch>(entity =>
        {
            entity.HasKey(e => e.BatchId).HasName("PK__Processi__5D55CE3839F4E7AE");

            entity.HasIndex(e => e.SystemBatchCode, "UQ__Processi__6C2C6F5B4FCDB034").IsUnique();

            entity.Property(e => e.BatchId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("BatchID");
            entity.Property(e => e.BatchCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CoffeeTypeId).HasColumnName("CoffeeTypeID");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CropSeasonId).HasColumnName("CropSeasonID");
            entity.Property(e => e.FarmerId).HasColumnName("FarmerID");
            entity.Property(e => e.InputUnit)
                .HasMaxLength(20)
                .HasDefaultValue("Kg");
            entity.Property(e => e.MethodId).HasColumnName("MethodID");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.SystemBatchCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.CoffeeType).WithMany(p => p.ProcessingBatches)
                .HasForeignKey(d => d.CoffeeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingBatches_CoffeeTypeID");

            entity.HasOne(d => d.CropSeason).WithMany(p => p.ProcessingBatches)
                .HasForeignKey(d => d.CropSeasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingBatches_CropSeason");

            entity.HasOne(d => d.Farmer).WithMany(p => p.ProcessingBatches)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingBatches_Farmer");

            entity.HasOne(d => d.Method).WithMany(p => p.ProcessingBatches)
                .HasForeignKey(d => d.MethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingBatches_Method");
        });

        modelBuilder.Entity<ProcessingBatchEvaluation>(entity =>
        {
            entity.HasKey(e => e.EvaluationId).HasName("PK__Processi__36AE68D37C7F8E57");

            entity.HasIndex(e => e.EvaluationCode, "UQ__Processi__62264CFD27F02D95").IsUnique();

            entity.Property(e => e.EvaluationId)
                .ValueGeneratedNever()
                .HasColumnName("EvaluationID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EvaluatedAt).HasColumnType("datetime");
            entity.Property(e => e.EvaluationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EvaluationResult).HasMaxLength(50);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Batch).WithMany(p => p.ProcessingBatchEvaluations)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Evaluations_Batch");
        });

        modelBuilder.Entity<ProcessingBatchProgress>(entity =>
        {
            entity.HasKey(e => e.ProgressId).HasName("PK__Processi__BAE29C853E1C562F");

            entity.Property(e => e.ProgressId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ProgressID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OutputUnit)
                .HasMaxLength(20)
                .HasDefaultValue("Kg");
            entity.Property(e => e.PhotoUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PhotoURL");
            entity.Property(e => e.StageId).HasColumnName("StageID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VideoUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("VideoURL");

            entity.HasOne(d => d.Batch).WithMany(p => p.ProcessingBatchProgresses)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BatchProgresses_Batch");

            entity.HasOne(d => d.Stage).WithMany(p => p.ProcessingBatchProgresses)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BatchProgresses_ProcessingStages");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.ProcessingBatchProgresses)
                .HasForeignKey(d => d.UpdatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BatchProgresses_Farmer");
        });

        modelBuilder.Entity<ProcessingBatchWaste>(entity =>
        {
            entity.HasKey(e => e.WasteId).HasName("PK__Processi__716E552135BD452D");

            entity.HasIndex(e => e.WasteCode, "UQ__Processi__424CD36ECB31E0F7").IsUnique();

            entity.Property(e => e.WasteId)
                .ValueGeneratedNever()
                .HasColumnName("WasteID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisposedAt).HasColumnType("datetime");
            entity.Property(e => e.IsDisposed).HasDefaultValue(false);
            entity.Property(e => e.ProgressId).HasColumnName("ProgressID");
            entity.Property(e => e.RecordedAt).HasColumnType("datetime");
            entity.Property(e => e.Unit).HasMaxLength(20);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WasteCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WasteType).HasMaxLength(100);

            entity.HasOne(d => d.Progress).WithMany(p => p.ProcessingBatchWastes)
                .HasForeignKey(d => d.ProgressId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Wastes_Progress");
        });

        modelBuilder.Entity<ProcessingMethod>(entity =>
        {
            entity.HasKey(e => e.MethodId).HasName("PK__Processi__FC681FB12549BA5E");

            entity.HasIndex(e => e.MethodCode, "UQ__Processi__11E9210D720D6AA5").IsUnique();

            entity.Property(e => e.MethodId).HasColumnName("MethodID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MethodCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<ProcessingParameter>(entity =>
        {
            entity.HasKey(e => e.ParameterId).HasName("PK__Processi__F80C629764F2C655");

            entity.Property(e => e.ParameterId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ParameterID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ParameterName).HasMaxLength(100);
            entity.Property(e => e.ParameterValue).HasMaxLength(100);
            entity.Property(e => e.ProgressId).HasColumnName("ProgressID");
            entity.Property(e => e.RecordedAt).HasColumnType("datetime");
            entity.Property(e => e.Unit).HasMaxLength(20);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Progress).WithMany(p => p.ProcessingParameters)
                .HasForeignKey(d => d.ProgressId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingParameters_Progress");
        });

        modelBuilder.Entity<ProcessingStage>(entity =>
        {
            entity.HasKey(e => e.StageId).HasName("PK__Processi__03EB7AF87F945FE2");

            entity.Property(e => e.StageId).HasColumnName("StageID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsRequired).HasDefaultValue(true);
            entity.Property(e => e.MethodId).HasColumnName("MethodID");
            entity.Property(e => e.StageCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StageName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Method).WithMany(p => p.ProcessingStages)
                .HasForeignKey(d => d.MethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingStages_Method");
        });

        modelBuilder.Entity<ProcessingWasteDisposal>(entity =>
        {
            entity.HasKey(e => e.DisposalId).HasName("PK__Processi__206044C3D8E50292");

            entity.HasIndex(e => e.DisposalCode, "UQ__Processi__68D7C97356D9C913").IsUnique();

            entity.Property(e => e.DisposalId)
                .ValueGeneratedNever()
                .HasColumnName("DisposalID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisposalCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DisposalMethod)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.HandledAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsSold).HasDefaultValue(false);
            entity.Property(e => e.Revenue).HasColumnType("money");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WasteId).HasColumnName("WasteID");

            entity.HasOne(d => d.Waste).WithMany(p => p.ProcessingWasteDisposals)
                .HasForeignKey(d => d.WasteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Disposals_Waste");
        });

        modelBuilder.Entity<ProcurementPlan>(entity =>
        {
            entity.HasKey(e => e.PlanId).HasName("PK__Procurem__755C22D7C57AAE2F");

            entity.HasIndex(e => e.PlanCode, "UQ__Procurem__DDC8069BA7AE8085").IsUnique();

            entity.Property(e => e.PlanId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PlanID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PlanCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProgressPercentage).HasDefaultValue(0.0);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Draft");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ProcurementPlans)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcurementPlans_CreatedBy");
        });

        modelBuilder.Entity<ProcurementPlansDetail>(entity =>
        {
            entity.HasKey(e => e.PlanDetailsId).HasName("PK__Procurem__ECEDC4CC3934166D");

            entity.HasIndex(e => e.PlanDetailCode, "UQ__Procurem__020415AC5CAB998B").IsUnique();

            entity.Property(e => e.PlanDetailsId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PlanDetailsID");
            entity.Property(e => e.CoffeeTypeId).HasColumnName("CoffeeTypeID");
            entity.Property(e => e.ContractItemId).HasColumnName("ContractItemID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PlanDetailCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlanId).HasColumnName("PlanID");
            entity.Property(e => e.ProcessMethodId).HasColumnName("ProcessMethodID");
            entity.Property(e => e.ProgressPercentage).HasDefaultValue(0.0);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Active");
            entity.Property(e => e.TargetRegion).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CoffeeType).WithMany(p => p.ProcurementPlansDetails)
                .HasForeignKey(d => d.CoffeeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcurementPlansDetails_CoffeeTypeID");

            entity.HasOne(d => d.ContractItem).WithMany(p => p.ProcurementPlansDetails)
                .HasForeignKey(d => d.ContractItemId)
                .HasConstraintName("FK_ProcurementPlansDetails_ContractItemID");

            entity.HasOne(d => d.Plan).WithMany(p => p.ProcurementPlansDetails)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcurementPlansDetails_PlanID");

            entity.HasOne(d => d.ProcessMethod).WithMany(p => p.ProcurementPlansDetails)
                .HasForeignKey(d => d.ProcessMethodId)
                .HasConstraintName("FK_ProcurementPlansDetails_ProcessMethodID");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__Products__B40CC6ED40E8AD70");

            entity.HasIndex(e => e.ProductCode, "UQ__Products__2F4E024F54BFEBE6").IsUnique();

            entity.Property(e => e.ProductId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ProductID");
            entity.Property(e => e.ApprovedAt).HasColumnType("datetime");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CertificationUrl)
                .HasMaxLength(255)
                .HasColumnName("CertificationURL");
            entity.Property(e => e.CoffeeTypeId).HasColumnName("CoffeeTypeID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EvaluatedQuality).HasMaxLength(100);
            entity.Property(e => e.GeographicalIndicationCode).HasMaxLength(100);
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.OriginFarmLocation).HasMaxLength(255);
            entity.Property(e => e.OriginRegion).HasMaxLength(100);
            entity.Property(e => e.ProductCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasDefaultValue("Kg");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.ProductApprovedByNavigations)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK_Products_ApprovedBy");

            entity.HasOne(d => d.Batch).WithMany(p => p.Products)
                .HasForeignKey(d => d.BatchId)
                .HasConstraintName("FK_Products_BatchID");

            entity.HasOne(d => d.CoffeeType).WithMany(p => p.Products)
                .HasForeignKey(d => d.CoffeeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_CoffeeType");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ProductCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_CreatedBy");

            entity.HasOne(d => d.Inventory).WithMany(p => p.Products)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_InventoryID");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Roles__8AFACE3A27F92FD9");

            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Shipment>(entity =>
        {
            entity.HasKey(e => e.ShipmentId).HasName("PK__Shipment__5CAD378D2064140B");

            entity.HasIndex(e => e.ShipmentCode, "UQ__Shipment__E1167C21BB3AAA51").IsUnique();

            entity.Property(e => e.ShipmentId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ShipmentID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeliveryStaffId).HasColumnName("DeliveryStaffID");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(50)
                .HasDefaultValue("In_Transit");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ReceivedAt).HasColumnType("datetime");
            entity.Property(e => e.ShipmentCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ShippedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ShipmentCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shipments_CreatedBy");

            entity.HasOne(d => d.DeliveryStaff).WithMany(p => p.ShipmentDeliveryStaffs)
                .HasForeignKey(d => d.DeliveryStaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shipments_DeliveryStaffID");

            entity.HasOne(d => d.Order).WithMany(p => p.Shipments)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shipments_OrderID");
        });

        modelBuilder.Entity<ShipmentDetail>(entity =>
        {
            entity.HasKey(e => e.ShipmentDetailId).HasName("PK__Shipment__047142C0B87A9FA3");

            entity.Property(e => e.ShipmentDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ShipmentDetailID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");
            entity.Property(e => e.ShipmentId).HasColumnName("ShipmentID");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasDefaultValue("Kg");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.ShipmentDetails)
                .HasForeignKey(d => d.OrderItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShipmentDetails_OrderItemID");

            entity.HasOne(d => d.Shipment).WithMany(p => p.ShipmentDetails)
                .HasForeignKey(d => d.ShipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShipmentDetails_ShipmentID");
        });

        modelBuilder.Entity<SystemConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SystemCo__3214EC079D660CB3");

            entity.ToTable("SystemConfiguration");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.EffectedDateFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectedDateTo).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.MaxValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Unit).HasMaxLength(20);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<SystemConfigurationUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SystemCo__3214EC07DAF2DCA1");

            entity.Property(e => e.GrantedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PermissionLevel)
                .HasMaxLength(50)
                .HasDefaultValue("manage");
            entity.Property(e => e.RevokedAt).HasColumnType("datetime");
            entity.Property(e => e.SystemConfigurationId).HasColumnName("SystemConfigurationID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.SystemConfiguration).WithMany(p => p.SystemConfigurationUsers)
                .HasForeignKey(d => d.SystemConfigurationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SystemConfigUsers_ConfigID");

            entity.HasOne(d => d.User).WithMany(p => p.SystemConfigurationUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SystemConfigUsers_UserID");
        });

        modelBuilder.Entity<SystemNotification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__SystemNo__20CF2E32C69E1EAC");

            entity.HasIndex(e => e.NotificationCode, "UQ__SystemNo__098D65DE86705834").IsUnique();

            entity.Property(e => e.NotificationId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("NotificationID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.NotificationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.Type).HasMaxLength(50);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SystemNotifications)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_SystemNotifications_CreatedBy");
        });

        modelBuilder.Entity<SystemNotificationRecipient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SystemNo__3214EC276535CF4B");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ID");
            entity.Property(e => e.IsRead).HasDefaultValue(false);
            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.ReadAt).HasColumnType("datetime");
            entity.Property(e => e.RecipientId).HasColumnName("RecipientID");

            entity.HasOne(d => d.Notification).WithMany(p => p.SystemNotificationRecipients)
                .HasForeignKey(d => d.NotificationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationRecipients_Notification");

            entity.HasOne(d => d.Recipient).WithMany(p => p.SystemNotificationRecipients)
                .HasForeignKey(d => d.RecipientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationRecipients_Recipient");
        });

        modelBuilder.Entity<UserAccount>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__UserAcco__1788CCACDCE9FC15");

            entity.HasIndex(e => e.UserCode, "UQ__UserAcco__1DF52D0C4BB71C89").IsUnique();

            entity.HasIndex(e => e.PhoneNumber, "UQ__UserAcco__85FB4E3800889D84").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__UserAcco__A9D105340B792C64").IsUnique();

            entity.Property(e => e.UserId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("UserID");
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.EmailVerified).HasDefaultValue(false);
            entity.Property(e => e.Gender).HasMaxLength(20);
            entity.Property(e => e.IsVerified).HasDefaultValue(false);
            entity.Property(e => e.LastLogin).HasColumnType("datetime");
            entity.Property(e => e.LoginType)
                .HasMaxLength(20)
                .HasDefaultValue("System");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            entity.Property(e => e.ProfilePictureUrl).HasMaxLength(500);
            entity.Property(e => e.RegistrationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("Active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VerificationCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Role).WithMany(p => p.UserAccounts)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAccounts_RoleID");
        });

        modelBuilder.Entity<Wallet>(entity =>
        {
            entity.HasKey(e => e.WalletId).HasName("PK__Wallets__84D4F92E3D406C51");

            entity.HasIndex(e => e.UserId, "UQ__Wallets__1788CCADD77D5A70").IsUnique();

            entity.Property(e => e.WalletId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("WalletID");
            entity.Property(e => e.LastUpdated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WalletType)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.User).WithOne(p => p.Wallet)
                .HasForeignKey<Wallet>(d => d.UserId)
                .HasConstraintName("FK_Wallets_UserID");
        });

        modelBuilder.Entity<WalletTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PK__WalletTr__55433A4BDF0247F5");

            entity.Property(e => e.TransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("TransactionID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.TransactionType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.WalletId).HasColumnName("WalletID");

            entity.HasOne(d => d.Payment).WithMany(p => p.WalletTransactions)
                .HasForeignKey(d => d.PaymentId)
                .HasConstraintName("FK_WalletTransactions_PaymentID");

            entity.HasOne(d => d.Wallet).WithMany(p => p.WalletTransactions)
                .HasForeignKey(d => d.WalletId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WalletTransactions_WalletID");
        });

        modelBuilder.Entity<Warehouse>(entity =>
        {
            entity.HasKey(e => e.WarehouseId).HasName("PK__Warehous__2608AFD9A489BD7F");

            entity.HasIndex(e => e.WarehouseCode, "UQ__Warehous__1686A0562199D1AB").IsUnique();

            entity.Property(e => e.WarehouseId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("WarehouseID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.ManagerId).HasColumnName("ManagerID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Manager).WithMany(p => p.Warehouses)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Warehouses_Manager");
        });

        modelBuilder.Entity<WarehouseInboundRequest>(entity =>
        {
            entity.HasKey(e => e.InboundRequestId).HasName("PK__Warehous__70929FF55D46303C");

            entity.HasIndex(e => e.InboundRequestCode, "UQ__Warehous__4EB81AC5DDC87462").IsUnique();

            entity.Property(e => e.InboundRequestId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("InboundRequestID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.BusinessStaffId).HasColumnName("BusinessStaffID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DetailId).HasColumnName("DetailID");
            entity.Property(e => e.FarmerId).HasColumnName("FarmerID");
            entity.Property(e => e.InboundRequestCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Batch).WithMany(p => p.WarehouseInboundRequests)
                .HasForeignKey(d => d.BatchId)
                .HasConstraintName("FK_WarehouseInboundRequests_Batch");

            entity.HasOne(d => d.BusinessStaff).WithMany(p => p.WarehouseInboundRequests)
                .HasForeignKey(d => d.BusinessStaffId)
                .HasConstraintName("FK_WarehouseInboundRequests_Manager");

            entity.HasOne(d => d.Detail).WithMany(p => p.WarehouseInboundRequests)
                .HasForeignKey(d => d.DetailId)
                .HasConstraintName("FK_WarehouseInboundRequests_CropSeasonDetails");

            entity.HasOne(d => d.Farmer).WithMany(p => p.WarehouseInboundRequests)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseInboundRequests_Farmer");
        });

        modelBuilder.Entity<WarehouseOutboundReceipt>(entity =>
        {
            entity.HasKey(e => e.OutboundReceiptId).HasName("PK__Warehous__0E3C50EEE59FC48E");

            entity.HasIndex(e => e.OutboundReceiptCode, "UQ__Warehous__CD7763FC49347C36").IsUnique();

            entity.Property(e => e.OutboundReceiptId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OutboundReceiptID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExportedAt).HasColumnType("datetime");
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.OutboundReceiptCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OutboundRequestId).HasColumnName("OutboundRequestID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");

            entity.HasOne(d => d.Batch).WithMany(p => p.WarehouseOutboundReceipts)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundReceipts_Batch");

            entity.HasOne(d => d.ExportedByNavigation).WithMany(p => p.WarehouseOutboundReceipts)
                .HasForeignKey(d => d.ExportedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundReceipts_Exporter");

            entity.HasOne(d => d.Inventory).WithMany(p => p.WarehouseOutboundReceipts)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundReceipts_Inventory");

            entity.HasOne(d => d.OutboundRequest).WithMany(p => p.WarehouseOutboundReceipts)
                .HasForeignKey(d => d.OutboundRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundReceipts_Request");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseOutboundReceipts)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundReceipts_Warehouse");
        });

        modelBuilder.Entity<WarehouseOutboundRequest>(entity =>
        {
            entity.HasKey(e => e.OutboundRequestId).HasName("PK__Warehous__49E12490006A95B5");

            entity.HasIndex(e => e.OutboundRequestCode, "UQ__Warehous__DEE1D822207D167B").IsUnique();

            entity.Property(e => e.OutboundRequestId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OutboundRequestID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");
            entity.Property(e => e.OutboundRequestCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Purpose).HasMaxLength(100);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasDefaultValue("Kg");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");

            entity.HasOne(d => d.Inventory).WithMany(p => p.WarehouseOutboundRequests)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundRequests_Inventory");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.WarehouseOutboundRequests)
                .HasForeignKey(d => d.OrderItemId)
                .HasConstraintName("FK_WarehouseOutboundRequests_OrderItem");

            entity.HasOne(d => d.RequestedByNavigation).WithMany(p => p.WarehouseOutboundRequests)
                .HasForeignKey(d => d.RequestedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundRequests_Manager");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseOutboundRequests)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundRequests_Warehouse");
        });

        modelBuilder.Entity<WarehouseReceipt>(entity =>
        {
            entity.HasKey(e => e.ReceiptId).HasName("PK__Warehous__CC08C40099FE6A8A");

            entity.HasIndex(e => e.ReceiptCode, "UQ__Warehous__1AB76D000034FC16").IsUnique();

            entity.Property(e => e.ReceiptId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReceiptID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.DetailId).HasColumnName("DetailID");
            entity.Property(e => e.InboundRequestId).HasColumnName("InboundRequestID");
            entity.Property(e => e.LotCode).HasMaxLength(100);
            entity.Property(e => e.QrcodeUrl)
                .HasMaxLength(255)
                .HasColumnName("QRCodeURL");
            entity.Property(e => e.ReceiptCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedAt).HasColumnType("datetime");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");

            entity.HasOne(d => d.Batch).WithMany(p => p.WarehouseReceipts)
                .HasForeignKey(d => d.BatchId)
                .HasConstraintName("FK_WarehouseReceipts_Batch");

            entity.HasOne(d => d.Detail).WithMany(p => p.WarehouseReceipts)
                .HasForeignKey(d => d.DetailId)
                .HasConstraintName("FK_WarehouseReceipts_CropSeasonDetails");

            entity.HasOne(d => d.InboundRequest).WithMany(p => p.WarehouseReceipts)
                .HasForeignKey(d => d.InboundRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseReceipts_Request");

            entity.HasOne(d => d.ReceivedByNavigation).WithMany(p => p.WarehouseReceipts)
                .HasForeignKey(d => d.ReceivedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseReceipts_Receiver");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseReceipts)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseReceipts_Warehouse");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}