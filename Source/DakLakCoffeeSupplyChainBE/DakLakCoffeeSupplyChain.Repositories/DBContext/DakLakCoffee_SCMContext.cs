// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using DakLakCoffeeSupplyChain.Repositories.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace DakLakCoffeeSupplyChain.Repositories.DBContext;

public partial class DakLakCoffee_SCMContext : DbContext
{
    public DakLakCoffee_SCMContext()
    {
    }

    public DakLakCoffee_SCMContext(DbContextOptions<DakLakCoffee_SCMContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AgriculturalExpert> AgriculturalExperts { get; set; }

    public virtual DbSet<BusinessBuyer> BusinessBuyers { get; set; }

    public virtual DbSet<BusinessManager> BusinessManagers { get; set; }

    public virtual DbSet<BusinessStaff> BusinessStaffs { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<ContractItem> ContractItems { get; set; }

    public virtual DbSet<Conversation> Conversations { get; set; }

    public virtual DbSet<ConversationMessage> ConversationMessages { get; set; }

    public virtual DbSet<ConversationParticipant> ConversationParticipants { get; set; }

    public virtual DbSet<CropProgress> CropProgresses { get; set; }

    public virtual DbSet<CropSeason> CropSeasons { get; set; }

    public virtual DbSet<CropSeasonDetail> CropSeasonDetails { get; set; }

    public virtual DbSet<CropStage> CropStages { get; set; }

    public virtual DbSet<CultivationRegistration> CultivationRegistrations { get; set; }

    public virtual DbSet<CultivationRegistrationsDetail> CultivationRegistrationsDetails { get; set; }

    public virtual DbSet<ExpertAdvice> ExpertAdvices { get; set; }

    public virtual DbSet<Farmer> Farmers { get; set; }

    public virtual DbSet<FarmingCommitment> FarmingCommitments { get; set; }

    public virtual DbSet<GeneralFarmerReport> GeneralFarmerReports { get; set; }

    public virtual DbSet<Inventory> Inventories { get; set; }

    public virtual DbSet<InventoryLog> InventoryLogs { get; set; }

    public virtual DbSet<MediaFile> MediaFiles { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderComplaint> OrderComplaints { get; set; }

    public virtual DbSet<OrderItem> OrderItems { get; set; }

    public virtual DbSet<ProcessingBatch> ProcessingBatches { get; set; }

    public virtual DbSet<ProcessingBatchEvaluation> ProcessingBatchEvaluations { get; set; }

    public virtual DbSet<ProcessingBatchProgress> ProcessingBatchProgresses { get; set; }

    public virtual DbSet<ProcessingBatchWaste> ProcessingBatchWastes { get; set; }

    public virtual DbSet<ProcessingMethod> ProcessingMethods { get; set; }

    public virtual DbSet<ProcessingParameter> ProcessingParameters { get; set; }

    public virtual DbSet<ProcessingStage> ProcessingStages { get; set; }

    public virtual DbSet<ProcessingWasteDisposal> ProcessingWasteDisposals { get; set; }

    public virtual DbSet<ProcurementPlan> ProcurementPlans { get; set; }

    public virtual DbSet<ProcurementPlansDetail> ProcurementPlansDetails { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Shipment> Shipments { get; set; }

    public virtual DbSet<ShipmentDetail> ShipmentDetails { get; set; }

    public virtual DbSet<SystemNotification> SystemNotifications { get; set; }

    public virtual DbSet<SystemNotificationRecipient> SystemNotificationRecipients { get; set; }

    public virtual DbSet<UserAccount> UserAccounts { get; set; }

    public virtual DbSet<Warehouse> Warehouses { get; set; }

    public virtual DbSet<WarehouseInboundRequest> WarehouseInboundRequests { get; set; }

    public virtual DbSet<WarehouseOutboundReceipt> WarehouseOutboundReceipts { get; set; }

    public virtual DbSet<WarehouseOutboundRequest> WarehouseOutboundRequests { get; set; }

    public virtual DbSet<WarehouseReceipt> WarehouseReceipts { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .AddJsonFile("appsettings.Development.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);

        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"))
                         .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=ADMIN-PC;Initial Catalog=DakLakCoffee_SCM;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AgriculturalExpert>(entity =>
        {
            entity.HasKey(e => e.ExpertId).HasName("PK__Agricult__7EDB3A38638399D1");

            entity.HasIndex(e => e.UserId, "UQ__Agricult__1788CCADA0B4DDFD").IsUnique();

            entity.HasIndex(e => e.ExpertCode, "UQ__Agricult__FAAD20A791A8A003").IsUnique();

            entity.Property(e => e.ExpertId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ExpertID");
            entity.Property(e => e.AffiliatedOrganization).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpertCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExpertiseArea).HasMaxLength(255);
            entity.Property(e => e.IsVerified).HasDefaultValue(false);
            entity.Property(e => e.Qualifications).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithOne(p => p.AgriculturalExpert)
                .HasForeignKey<AgriculturalExpert>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AgriculturalExperts_UserID");
        });

        modelBuilder.Entity<BusinessBuyer>(entity =>
        {
            entity.HasKey(e => e.BuyerId).HasName("PK__Business__4B81C1CA65369763");

            entity.HasIndex(e => e.BuyerCode, "UQ__Business__F658F187EC10DD6E").IsUnique();

            entity.Property(e => e.BuyerId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("BuyerID");
            entity.Property(e => e.BuyerCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CompanyAddress).HasMaxLength(255);
            entity.Property(e => e.CompanyName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.Position).HasMaxLength(50);
            entity.Property(e => e.TaxId)
                .HasMaxLength(50)
                .HasColumnName("TaxID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Website).HasMaxLength(255);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.BusinessBuyers)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessBuyers_CreatedBy");
        });

        modelBuilder.Entity<BusinessManager>(entity =>
        {
            entity.HasKey(e => e.ManagerId).HasName("PK__Business__3BA2AA811AF96692");

            entity.HasIndex(e => e.ManagerCode, "UQ__Business__634BE7D158776107").IsUnique();

            entity.Property(e => e.ManagerId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ManagerID");
            entity.Property(e => e.BusinessLicenseUrl)
                .HasMaxLength(255)
                .HasColumnName("BusinessLicenseURL");
            entity.Property(e => e.CompanyAddress).HasMaxLength(255);
            entity.Property(e => e.CompanyName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ContactEmail).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Department).HasMaxLength(100);
            entity.Property(e => e.IsCompanyVerified).HasDefaultValue(false);
            entity.Property(e => e.ManagerCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Position).HasMaxLength(50);
            entity.Property(e => e.TaxId)
                .HasMaxLength(50)
                .HasColumnName("TaxID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Website).HasMaxLength(255);

            entity.HasOne(d => d.User).WithMany(p => p.BusinessManagers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessManagers_UserID");
        });

        modelBuilder.Entity<BusinessStaff>(entity =>
        {
            entity.HasKey(e => e.StaffId).HasName("PK__Business__96D4AAF73D795C08");

            entity.HasIndex(e => e.UserId, "UQ__Business__1788CCADBB56C601").IsUnique();

            entity.HasIndex(e => e.StaffCode, "UQ__Business__D83AD812BB7E9B67").IsUnique();

            entity.Property(e => e.StaffId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("StaffID");
            entity.Property(e => e.AssignedWarehouseId).HasColumnName("AssignedWarehouseID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Department).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Position).HasMaxLength(100);
            entity.Property(e => e.StaffCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SupervisorId).HasColumnName("SupervisorID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.AssignedWarehouse).WithMany(p => p.BusinessStaffs)
                .HasForeignKey(d => d.AssignedWarehouseId)
                .HasConstraintName("FK_BusinessStaffs_Warehouse");

            entity.HasOne(d => d.Supervisor).WithMany(p => p.BusinessStaffs)
                .HasForeignKey(d => d.SupervisorId)
                .HasConstraintName("FK_BusinessStaffs_Supervisor");

            entity.HasOne(d => d.User).WithOne(p => p.BusinessStaff)
                .HasForeignKey<BusinessStaff>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessStaffs_UserID");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => e.ContractId).HasName("PK__Contract__C90D3409492A7E36");

            entity.HasIndex(e => e.ContractCode, "UQ__Contract__CBECF833ADB150C3").IsUnique();

            entity.Property(e => e.ContractId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ContractID");
            entity.Property(e => e.BuyerId).HasColumnName("BuyerID");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContractFileUrl)
                .HasMaxLength(255)
                .HasColumnName("ContractFileURL");
            entity.Property(e => e.ContractNumber).HasMaxLength(100);
            entity.Property(e => e.ContractTitle).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SellerId).HasColumnName("SellerID");
            entity.Property(e => e.SignedAt).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Buyer).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.BuyerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contracts_BuyerID");

            entity.HasOne(d => d.Seller).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contracts_SellerID");
        });

        modelBuilder.Entity<ContractItem>(entity =>
        {
            entity.HasKey(e => e.ContractItemId).HasName("PK__Contract__18D3521528C89096");

            entity.Property(e => e.ContractItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ContractItemID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DiscountAmount).HasDefaultValue(0.0);
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractItems)
                .HasForeignKey(d => d.ContractId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractItems_ContractID");

            entity.HasOne(d => d.Product).WithMany(p => p.ContractItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractItems_ProductID");
        });

        modelBuilder.Entity<Conversation>(entity =>
        {
            entity.HasKey(e => e.ConversationId).HasName("PK__Conversa__C050D89729091182");

            entity.Property(e => e.ConversationId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ConversationID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CropProgressId).HasColumnName("CropProgressID");
            entity.Property(e => e.Topic).HasMaxLength(255);

            entity.HasOne(d => d.Batch).WithMany(p => p.Conversations)
                .HasForeignKey(d => d.BatchId)
                .HasConstraintName("FK_Conversations_Batch");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Conversations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_Conversations_CreatedBy");

            entity.HasOne(d => d.CropProgress).WithMany(p => p.Conversations)
                .HasForeignKey(d => d.CropProgressId)
                .HasConstraintName("FK_Conversations_CropProgress");
        });

        modelBuilder.Entity<ConversationMessage>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("PK__Conversa__C87C037C82FEA3B5");

            entity.Property(e => e.MessageId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("MessageID");
            entity.Property(e => e.ConversationId).HasColumnName("ConversationID");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("ImageURL");
            entity.Property(e => e.IsRead).HasDefaultValue(false);
            entity.Property(e => e.ReadAt).HasColumnType("datetime");
            entity.Property(e => e.SenderId).HasColumnName("SenderID");
            entity.Property(e => e.SentAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VideoUrl)
                .HasMaxLength(255)
                .HasColumnName("VideoURL");

            entity.HasOne(d => d.Conversation).WithMany(p => p.ConversationMessages)
                .HasForeignKey(d => d.ConversationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Messages_Conversation");

            entity.HasOne(d => d.Sender).WithMany(p => p.ConversationMessages)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Messages_Sender");
        });

        modelBuilder.Entity<ConversationParticipant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Conversa__3214EC270C378207");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ID");
            entity.Property(e => e.ConversationId).HasColumnName("ConversationID");
            entity.Property(e => e.JoinedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Conversation).WithMany(p => p.ConversationParticipants)
                .HasForeignKey(d => d.ConversationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConversationParticipants_Conversation");

            entity.HasOne(d => d.User).WithMany(p => p.ConversationParticipants)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConversationParticipants_User");
        });

        modelBuilder.Entity<CropProgress>(entity =>
        {
            entity.HasKey(e => e.ProgressId).HasName("PK__CropProg__BAE29C85379E6131");

            entity.Property(e => e.ProgressId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ProgressID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CropSeasonDetailId).HasColumnName("CropSeasonDetailID");
            entity.Property(e => e.PhotoUrl)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StageId).HasColumnName("StageID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VideoUrl)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.CropSeasonDetail).WithMany(p => p.CropProgresses)
                .HasForeignKey(d => d.CropSeasonDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropProgresses_CropSeasonDetailID");

            entity.HasOne(d => d.Stage).WithMany(p => p.CropProgresses)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropProgresses_StageID");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.CropProgresses)
                .HasForeignKey(d => d.UpdatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropProgresses_UpdatedBy");
        });

        modelBuilder.Entity<CropSeason>(entity =>
        {
            entity.HasKey(e => e.CropSeasonId).HasName("PK__CropSeas__675AF5E0EE601826");

            entity.HasIndex(e => e.CropSeasonCode, "UQ__CropSeas__D31201518ABB48C1").IsUnique();

            entity.Property(e => e.CropSeasonId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CropSeasonID");
            entity.Property(e => e.CommitmentId).HasColumnName("CommitmentID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CropSeasonCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FarmerId).HasColumnName("FarmerID");
            entity.Property(e => e.RegistrationId).HasColumnName("RegistrationID");
            entity.Property(e => e.SeasonName).HasMaxLength(100);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Commitment).WithMany(p => p.CropSeasons)
                .HasForeignKey(d => d.CommitmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropSeasons_CommitmentID");

            entity.HasOne(d => d.Farmer).WithMany(p => p.CropSeasons)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropSeasons_FarmerID");

            entity.HasOne(d => d.Registration).WithMany(p => p.CropSeasons)
                .HasForeignKey(d => d.RegistrationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropSeasons_RegistrationID");
        });

        modelBuilder.Entity<CropSeasonDetail>(entity =>
        {
            entity.HasKey(e => e.DetailId).HasName("PK__CropSeas__135C314DC0041160");

            entity.Property(e => e.DetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DetailID");
            entity.Property(e => e.CoffeeTypeId).HasColumnName("CoffeeTypeID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CropSeasonId).HasColumnName("CropSeasonID");
            entity.Property(e => e.PlannedQuality).HasMaxLength(50);
            entity.Property(e => e.QualityGrade).HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("planned");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CropSeason).WithMany(p => p.CropSeasonDetails)
                .HasForeignKey(d => d.CropSeasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CropSeasonDetails_CropSeasonID");
        });

        modelBuilder.Entity<CropStage>(entity =>
        {
            entity.HasKey(e => e.StageId).HasName("PK__CropStag__03EB7AF8EE5EB73E");

            entity.HasIndex(e => e.StageCode, "UQ__CropStag__7BFA4BE3783F1B65").IsUnique();

            entity.Property(e => e.StageId).HasColumnName("StageID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.StageCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StageName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<CultivationRegistration>(entity =>
        {
            entity.HasKey(e => e.RegistrationId).HasName("PK__Cultivat__6EF5883087A5F96D");

            entity.HasIndex(e => e.RegistrationCode, "UQ__Cultivat__A94D9FED41932EA0").IsUnique();

            entity.Property(e => e.RegistrationId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RegistrationID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FarmerId).HasColumnName("FarmerID");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.PlanId).HasColumnName("PlanID");
            entity.Property(e => e.RegisteredAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RegistrationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("pending");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Farmer).WithMany(p => p.CultivationRegistrations)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CultivationRegistrations_Farmers");

            entity.HasOne(d => d.Plan).WithMany(p => p.CultivationRegistrations)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CultivationRegistrations_ProcurementPlans");
        });

        modelBuilder.Entity<CultivationRegistrationsDetail>(entity =>
        {
            entity.HasKey(e => e.CultivationRegistrationDetailId).HasName("PK__Cultivat__B9AC84A649D580C7");

            entity.ToTable("CultivationRegistrationsDetail");

            entity.Property(e => e.CultivationRegistrationDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CultivationRegistrationDetailID");
            entity.Property(e => e.ApprovedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PlanDetailId).HasColumnName("PlanDetailID");
            entity.Property(e => e.RegistrationId).HasColumnName("RegistrationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("pending");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.CultivationRegistrationsDetails)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK_CultivationRegistrationsDetail_ApprovedBy");

            entity.HasOne(d => d.PlanDetail).WithMany(p => p.CultivationRegistrationsDetails)
                .HasForeignKey(d => d.PlanDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CultivationRegistrationsDetail_ProcurementPlansDetails");

            entity.HasOne(d => d.Registration).WithMany(p => p.CultivationRegistrationsDetails)
                .HasForeignKey(d => d.RegistrationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CultivationRegistrationsDetail_CultivationRegistrations");
        });

        modelBuilder.Entity<ExpertAdvice>(entity =>
        {
            entity.HasKey(e => e.AdviceId).HasName("PK__ExpertAd__4C842CE90E4F13EE");

            entity.ToTable("ExpertAdvice");

            entity.Property(e => e.AdviceId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("AdviceID");
            entity.Property(e => e.AdviceSource)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("human");
            entity.Property(e => e.AttachedFileUrl)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpertId).HasColumnName("ExpertID");
            entity.Property(e => e.ReportId).HasColumnName("ReportID");
            entity.Property(e => e.ResponseType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Expert).WithMany(p => p.ExpertAdvices)
                .HasForeignKey(d => d.ExpertId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GeneralExpertAdvice_Expert");

            entity.HasOne(d => d.Report).WithMany(p => p.ExpertAdvices)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GeneralExpertAdvice_Report");
        });

        modelBuilder.Entity<Farmer>(entity =>
        {
            entity.HasKey(e => e.FarmerId).HasName("PK__Farmers__731B88E8B7B0F849");

            entity.HasIndex(e => e.FarmerCode, "UQ__Farmers__F4EF7062FB963984").IsUnique();

            entity.Property(e => e.FarmerId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("FarmerID");
            entity.Property(e => e.CertificationStatus).HasMaxLength(100);
            entity.Property(e => e.CertificationUrl)
                .HasMaxLength(255)
                .HasColumnName("CertificationURL");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FarmLocation).HasMaxLength(255);
            entity.Property(e => e.FarmerCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsVerified).HasDefaultValue(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Farmers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Farmers_UserID");
        });

        modelBuilder.Entity<FarmingCommitment>(entity =>
        {
            entity.HasKey(e => e.CommitmentId).HasName("PK__FarmingC__5360E89710283B32");

            entity.HasIndex(e => e.CommitmentCode, "UQ__FarmingC__04FF0566B6CA6516").IsUnique();

            entity.Property(e => e.CommitmentId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CommitmentID");
            entity.Property(e => e.ApprovedAt).HasColumnType("datetime");
            entity.Property(e => e.CommitmentCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CommitmentDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FarmerId).HasColumnName("FarmerID");
            entity.Property(e => e.PlanDetailId).HasColumnName("PlanDetailID");
            entity.Property(e => e.PlanId).HasColumnName("PlanID");
            entity.Property(e => e.RegistrationDetailId).HasColumnName("RegistrationDetailID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.FarmingCommitments)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK_FarmingCommitments_ApprovedBy");

            entity.HasOne(d => d.Farmer).WithMany(p => p.FarmingCommitments)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FarmingCommitments_FarmerID");

            entity.HasOne(d => d.PlanDetail).WithMany(p => p.FarmingCommitments)
                .HasForeignKey(d => d.PlanDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FarmingCommitments_PlanDetailID");

            entity.HasOne(d => d.Plan).WithMany(p => p.FarmingCommitments)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FarmingCommitments_PlanID");

            entity.HasOne(d => d.RegistrationDetail).WithMany(p => p.FarmingCommitments)
                .HasForeignKey(d => d.RegistrationDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FarmingCommitments_RegistrationDetailID");
        });

        modelBuilder.Entity<GeneralFarmerReport>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK__GeneralF__D5BD48E53E327B05");

            entity.HasIndex(e => e.ReportCode, "UQ__GeneralF__0EDCD614C51DBC0E").IsUnique();

            entity.Property(e => e.ReportId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReportID");
            entity.Property(e => e.CropProgressId).HasColumnName("CropProgressID");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IsResolved).HasDefaultValue(false);
            entity.Property(e => e.ProcessingProgressId).HasColumnName("ProcessingProgressID");
            entity.Property(e => e.ReportCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReportType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReportedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ResolvedAt).HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VideoUrl)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.CropProgress).WithMany(p => p.GeneralFarmerReports)
                .HasForeignKey(d => d.CropProgressId)
                .HasConstraintName("FK_GeneralReports_CropProgress");

            entity.HasOne(d => d.ProcessingProgress).WithMany(p => p.GeneralFarmerReports)
                .HasForeignKey(d => d.ProcessingProgressId)
                .HasConstraintName("FK_GeneralReports_ProcessingProgress");

            entity.HasOne(d => d.ReportedByNavigation).WithMany(p => p.GeneralFarmerReports)
                .HasForeignKey(d => d.ReportedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GeneralReports_ReportedBy");
        });

        modelBuilder.Entity<Inventory>(entity =>
        {
            entity.HasKey(e => e.InventoryId).HasName("PK__Inventor__F5FDE6D31E530B0B");

            entity.HasIndex(e => e.InventoryCode, "UQ__Inventor__E1E5B5D8AC426C9A").IsUnique();

            entity.Property(e => e.InventoryId)
                .ValueGeneratedNever()
                .HasColumnName("InventoryID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.InventoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasDefaultValue("kg");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");

            entity.HasOne(d => d.Batch).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Inventories_Batch");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Inventories_Warehouse");
        });

        modelBuilder.Entity<InventoryLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK__Inventor__5E5499A83F5F7C22");

            entity.Property(e => e.LogId)
                .ValueGeneratedNever()
                .HasColumnName("LogID");
            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.LoggedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.TriggeredBySystem).HasDefaultValue(false);

            entity.HasOne(d => d.Inventory).WithMany(p => p.InventoryLogs)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryLogs_Inventory");
        });

        modelBuilder.Entity<MediaFile>(entity =>
        {
            entity.HasKey(e => e.MediaId).HasName("PK__MediaFil__B2C2B5AF4648F713");

            entity.Property(e => e.MediaId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("MediaID");
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MediaType)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MediaUrl)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MediaURL");
            entity.Property(e => e.RelatedEntity)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RelatedId).HasColumnName("RelatedID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UploadedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Orders__C3905BAFCFE80921");

            entity.HasIndex(e => e.OrderCode, "UQ__Orders__999B5229C314342B").IsUnique();

            entity.Property(e => e.OrderId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OrderID");
            entity.Property(e => e.BuyerId).HasColumnName("BuyerID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OrderCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.SellerId).HasColumnName("SellerID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("pending");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Buyer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.BuyerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_BuyerID");

            entity.HasOne(d => d.Contract).WithMany(p => p.Orders)
                .HasForeignKey(d => d.ContractId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_ContractID");

            entity.HasOne(d => d.Seller).WithMany(p => p.Orders)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_SellerID");
        });

        modelBuilder.Entity<OrderComplaint>(entity =>
        {
            entity.HasKey(e => e.ComplaintId).HasName("PK__OrderCom__740D89AFE63FBB71");

            entity.HasIndex(e => e.ComplaintCode, "UQ__OrderCom__8144A1BA347EE826").IsUnique();

            entity.Property(e => e.ComplaintId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ComplaintID");
            entity.Property(e => e.ComplaintCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ComplaintType).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EvidenceUrl)
                .HasMaxLength(255)
                .HasColumnName("EvidenceURL");
            entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");
            entity.Property(e => e.ResolvedAt).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("open");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.OrderComplaints)
                .HasForeignKey(d => d.OrderItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderComplaints_OrderItemID");

            entity.HasOne(d => d.RaisedByNavigation).WithMany(p => p.OrderComplaints)
                .HasForeignKey(d => d.RaisedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderComplaints_RaisedBy");

            entity.HasOne(d => d.ResolvedByNavigation).WithMany(p => p.OrderComplaints)
                .HasForeignKey(d => d.ResolvedBy)
                .HasConstraintName("FK_OrderComplaints_ResolvedBy");
        });

        modelBuilder.Entity<OrderItem>(entity =>
        {
            entity.HasKey(e => e.OrderItemId).HasName("PK__OrderIte__57ED06A1C5B7823E");

            entity.Property(e => e.OrderItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OrderItemID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DiscountAmount).HasDefaultValue(0.0);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderItems_OrderID");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderItems_ProductID");
        });

        modelBuilder.Entity<ProcessingBatch>(entity =>
        {
            entity.HasKey(e => e.BatchId).HasName("PK__Processi__5D55CE38D686A846");

            entity.HasIndex(e => e.SystemBatchCode, "UQ__Processi__6C2C6F5B045EF037").IsUnique();

            entity.Property(e => e.BatchId)
                .ValueGeneratedNever()
                .HasColumnName("BatchID");
            entity.Property(e => e.BatchCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CoffeeTypeId).HasColumnName("CoffeeTypeID");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CropSeasonId).HasColumnName("CropSeasonID");
            entity.Property(e => e.FarmerId).HasColumnName("FarmerID");
            entity.Property(e => e.InputUnit)
                .HasMaxLength(20)
                .HasDefaultValue("kg");
            entity.Property(e => e.MethodId).HasColumnName("MethodID");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.SystemBatchCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.CropSeason).WithMany(p => p.ProcessingBatches)
                .HasForeignKey(d => d.CropSeasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingBatches_CropSeason");

            entity.HasOne(d => d.Farmer).WithMany(p => p.ProcessingBatches)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingBatches_Farmer");

            entity.HasOne(d => d.Method).WithMany(p => p.ProcessingBatches)
                .HasForeignKey(d => d.MethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingBatches_Method");
        });

        modelBuilder.Entity<ProcessingBatchEvaluation>(entity =>
        {
            entity.HasKey(e => e.EvaluationId).HasName("PK__Processi__36AE68D3C42A8408");

            entity.HasIndex(e => e.EvaluationCode, "UQ__Processi__62264CFD992503AB").IsUnique();

            entity.Property(e => e.EvaluationId)
                .ValueGeneratedNever()
                .HasColumnName("EvaluationID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EvaluatedAt).HasColumnType("datetime");
            entity.Property(e => e.EvaluationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EvaluationResult).HasMaxLength(50);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Batch).WithMany(p => p.ProcessingBatchEvaluations)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Evaluations_Batch");
        });

        modelBuilder.Entity<ProcessingBatchProgress>(entity =>
        {
            entity.HasKey(e => e.ProgressId).HasName("PK__Processi__BAE29C85A4453576");

            entity.Property(e => e.ProgressId)
                .ValueGeneratedNever()
                .HasColumnName("ProgressID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OutputUnit)
                .HasMaxLength(20)
                .HasDefaultValue("kg");
            entity.Property(e => e.PhotoUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PhotoURL");
            entity.Property(e => e.StageId).HasColumnName("StageID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VideoUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("VideoURL");

            entity.HasOne(d => d.Batch).WithMany(p => p.ProcessingBatchProgresses)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BatchProgresses_Batch");

            entity.HasOne(d => d.Stage).WithMany(p => p.ProcessingBatchProgresses)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BatchProgresses_ProcessingStages");
        });

        modelBuilder.Entity<ProcessingBatchWaste>(entity =>
        {
            entity.HasKey(e => e.WasteId).HasName("PK__Processi__716E55214397281B");

            entity.HasIndex(e => e.WasteCode, "UQ__Processi__424CD36E0070798F").IsUnique();

            entity.Property(e => e.WasteId)
                .ValueGeneratedNever()
                .HasColumnName("WasteID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisposedAt).HasColumnType("datetime");
            entity.Property(e => e.IsDisposed).HasDefaultValue(false);
            entity.Property(e => e.ProgressId).HasColumnName("ProgressID");
            entity.Property(e => e.RecordedAt).HasColumnType("datetime");
            entity.Property(e => e.Unit).HasMaxLength(20);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WasteCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WasteType).HasMaxLength(100);

            entity.HasOne(d => d.Progress).WithMany(p => p.ProcessingBatchWastes)
                .HasForeignKey(d => d.ProgressId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Wastes_Progress");
        });

        modelBuilder.Entity<ProcessingMethod>(entity =>
        {
            entity.HasKey(e => e.MethodId).HasName("PK__Processi__FC681FB119B52979");

            entity.HasIndex(e => e.MethodCode, "UQ__Processi__11E9210DDF926670").IsUnique();

            entity.Property(e => e.MethodId).HasColumnName("MethodID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MethodCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<ProcessingParameter>(entity =>
        {
            entity.HasKey(e => e.ParameterId).HasName("PK__Processi__F80C6297388253C3");

            entity.Property(e => e.ParameterId)
                .ValueGeneratedNever()
                .HasColumnName("ParameterID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ParameterName).HasMaxLength(100);
            entity.Property(e => e.ParameterValue).HasMaxLength(100);
            entity.Property(e => e.ProgressId).HasColumnName("ProgressID");
            entity.Property(e => e.RecordedAt).HasColumnType("datetime");
            entity.Property(e => e.Unit).HasMaxLength(20);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Progress).WithMany(p => p.ProcessingParameters)
                .HasForeignKey(d => d.ProgressId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingParameters_Progress");
        });

        modelBuilder.Entity<ProcessingStage>(entity =>
        {
            entity.HasKey(e => e.StageId).HasName("PK__Processi__03EB7AF8E212542B");

            entity.Property(e => e.StageId).HasColumnName("StageID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsRequired).HasDefaultValue(true);
            entity.Property(e => e.MethodId).HasColumnName("MethodID");
            entity.Property(e => e.StageCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StageName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Method).WithMany(p => p.ProcessingStages)
                .HasForeignKey(d => d.MethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingStages_Method");
        });

        modelBuilder.Entity<ProcessingWasteDisposal>(entity =>
        {
            entity.HasKey(e => e.DisposalId).HasName("PK__Processi__206044C347D41E61");

            entity.HasIndex(e => e.DisposalCode, "UQ__Processi__68D7C973CD9EF690").IsUnique();

            entity.Property(e => e.DisposalId)
                .ValueGeneratedNever()
                .HasColumnName("DisposalID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisposalCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DisposalMethod)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.HandledAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsSold).HasDefaultValue(false);
            entity.Property(e => e.Revenue).HasColumnType("money");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WasteId).HasColumnName("WasteID");

            entity.HasOne(d => d.Waste).WithMany(p => p.ProcessingWasteDisposals)
                .HasForeignKey(d => d.WasteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Disposals_Waste");
        });

        modelBuilder.Entity<ProcurementPlan>(entity =>
        {
            entity.HasKey(e => e.PlanId).HasName("PK__Procurem__755C22D72B33B31F");

            entity.HasIndex(e => e.PlanCode, "UQ__Procurem__DDC8069B0FD6CD78").IsUnique();

            entity.Property(e => e.PlanId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PlanID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PlanCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProgressPercentage).HasDefaultValue(0.0);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("draft");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ProcurementPlans)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcurementPlans_CreatedBy");
        });

        modelBuilder.Entity<ProcurementPlansDetail>(entity =>
        {
            entity.HasKey(e => e.PlanDetailsId).HasName("PK__Procurem__ECEDC4CCD44B045B");

            entity.HasIndex(e => e.PlanDetailCode, "UQ__Procurem__020415AC73D458AD").IsUnique();

            entity.Property(e => e.PlanDetailsId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PlanDetailsID");
            entity.Property(e => e.BeanColor).HasMaxLength(50);
            entity.Property(e => e.BeanColorImageUrl).HasMaxLength(255);
            entity.Property(e => e.BeanSize).HasMaxLength(50);
            entity.Property(e => e.CoffeeTypeId).HasColumnName("CoffeeTypeID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CropType)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PlanDetailCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlanId).HasColumnName("PlanID");
            entity.Property(e => e.ProgressPercentage).HasDefaultValue(0.0);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("active");
            entity.Property(e => e.TargetRegion).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Plan).WithMany(p => p.ProcurementPlansDetails)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcurementPlansDetails_PlanID");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__Products__B40CC6ED0C081B99");

            entity.HasIndex(e => e.ProductCode, "UQ__Products__2F4E024F800B1AD5").IsUnique();

            entity.Property(e => e.ProductId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ProductID");
            entity.Property(e => e.ApprovedAt).HasColumnType("datetime");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CertificationUrl)
                .HasMaxLength(255)
                .HasColumnName("CertificationURL");
            entity.Property(e => e.CoffeeTypeId).HasColumnName("CoffeeTypeID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EvaluatedQuality).HasMaxLength(100);
            entity.Property(e => e.GeographicalIndicationCode).HasMaxLength(100);
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.OriginFarmLocation).HasMaxLength(255);
            entity.Property(e => e.OriginRegion).HasMaxLength(100);
            entity.Property(e => e.ProductCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("pending");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasDefaultValue("kg");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.Products)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK_Products_ApprovedBy");

            entity.HasOne(d => d.Batch).WithMany(p => p.Products)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_BatchID");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Products)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_CreatedBy");

            entity.HasOne(d => d.Inventory).WithMany(p => p.Products)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_InventoryID");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Roles__8AFACE3A7C99DC77");

            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Shipment>(entity =>
        {
            entity.HasKey(e => e.ShipmentId).HasName("PK__Shipment__5CAD378DC9A6162B");

            entity.HasIndex(e => e.ShipmentCode, "UQ__Shipment__E1167C216BC1CF04").IsUnique();

            entity.Property(e => e.ShipmentId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ShipmentID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeliveryStaffId).HasColumnName("DeliveryStaffID");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(50)
                .HasDefaultValue("in_transit");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ReceivedAt).HasColumnType("datetime");
            entity.Property(e => e.ShipmentCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ShippedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.DeliveryStaff).WithMany(p => p.Shipments)
                .HasForeignKey(d => d.DeliveryStaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shipments_DeliveryStaffID");

            entity.HasOne(d => d.Order).WithMany(p => p.Shipments)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shipments_OrderID");
        });

        modelBuilder.Entity<ShipmentDetail>(entity =>
        {
            entity.HasKey(e => e.ShipmentDetailId).HasName("PK__Shipment__047142C0D613ABE4");

            entity.Property(e => e.ShipmentDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ShipmentDetailID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.ShipmentId).HasColumnName("ShipmentID");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasDefaultValue("kg");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Product).WithMany(p => p.ShipmentDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShipmentDetails_ProductID");

            entity.HasOne(d => d.Shipment).WithMany(p => p.ShipmentDetails)
                .HasForeignKey(d => d.ShipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShipmentDetails_ShipmentID");
        });

        modelBuilder.Entity<SystemNotification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__SystemNo__20CF2E328588C028");

            entity.HasIndex(e => e.NotificationCode, "UQ__SystemNo__098D65DE092AA720").IsUnique();

            entity.Property(e => e.NotificationId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("NotificationID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.NotificationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.Type).HasMaxLength(50);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SystemNotifications)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_SystemNotifications_CreatedBy");
        });

        modelBuilder.Entity<SystemNotificationRecipient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SystemNo__3214EC27E9365377");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ID");
            entity.Property(e => e.IsRead).HasDefaultValue(false);
            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.ReadAt).HasColumnType("datetime");
            entity.Property(e => e.RecipientId).HasColumnName("RecipientID");

            entity.HasOne(d => d.Notification).WithMany(p => p.SystemNotificationRecipients)
                .HasForeignKey(d => d.NotificationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationRecipients_Notification");

            entity.HasOne(d => d.Recipient).WithMany(p => p.SystemNotificationRecipients)
                .HasForeignKey(d => d.RecipientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationRecipients_Recipient");
        });

        modelBuilder.Entity<UserAccount>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__UserAcco__1788CCAC821F6A2F");

            entity.HasIndex(e => e.UserCode, "UQ__UserAcco__1DF52D0CE1332A64").IsUnique();

            entity.HasIndex(e => e.PhoneNumber, "UQ__UserAcco__85FB4E38E36EB7EC").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__UserAcco__A9D10534D53CE97D").IsUnique();

            entity.Property(e => e.UserId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("UserID");
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.EmailVerified).HasDefaultValue(false);
            entity.Property(e => e.Gender).HasMaxLength(20);
            entity.Property(e => e.IsVerified).HasDefaultValue(false);
            entity.Property(e => e.LastLogin).HasColumnType("datetime");
            entity.Property(e => e.LoginType)
                .HasMaxLength(20)
                .HasDefaultValue("local");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            entity.Property(e => e.ProfilePictureUrl).HasMaxLength(500);
            entity.Property(e => e.RegistrationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VerificationCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Role).WithMany(p => p.UserAccounts)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAccounts_RoleID");
        });

        modelBuilder.Entity<Warehouse>(entity =>
        {
            entity.HasKey(e => e.WarehouseId).HasName("PK__Warehous__2608AFD9C43A491A");

            entity.HasIndex(e => e.WarehouseCode, "UQ__Warehous__1686A056B0B78791").IsUnique();

            entity.Property(e => e.WarehouseId)
                .ValueGeneratedNever()
                .HasColumnName("WarehouseID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.ManagerId).HasColumnName("ManagerID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Manager).WithMany(p => p.Warehouses)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Warehouses_Manager");
        });

        modelBuilder.Entity<WarehouseInboundRequest>(entity =>
        {
            entity.HasKey(e => e.InboundRequestId).HasName("PK__Warehous__70929FF5C540CDF5");

            entity.HasIndex(e => e.InboundRequestCode, "UQ__Warehous__4EB81AC5A5933478").IsUnique();

            entity.Property(e => e.InboundRequestId)
                .ValueGeneratedNever()
                .HasColumnName("InboundRequestID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.BusinessManagerId).HasColumnName("BusinessManagerID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FarmerId).HasColumnName("FarmerID");
            entity.Property(e => e.InboundRequestCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("pending");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Batch).WithMany(p => p.WarehouseInboundRequests)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseInboundRequests_Batch");

            entity.HasOne(d => d.BusinessManager).WithMany(p => p.WarehouseInboundRequests)
                .HasForeignKey(d => d.BusinessManagerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseInboundRequests_Manager");

            entity.HasOne(d => d.Farmer).WithMany(p => p.WarehouseInboundRequests)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseInboundRequests_Farmer");
        });

        modelBuilder.Entity<WarehouseOutboundReceipt>(entity =>
        {
            entity.HasKey(e => e.OutboundReceiptId).HasName("PK__Warehous__0E3C50EEC6DBB06D");

            entity.HasIndex(e => e.OutboundReceiptCode, "UQ__Warehous__CD7763FCC7A6FC14").IsUnique();

            entity.Property(e => e.OutboundReceiptId)
                .ValueGeneratedNever()
                .HasColumnName("OutboundReceiptID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExportedAt).HasColumnType("datetime");
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.OutboundReceiptCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OutboundRequestId).HasColumnName("OutboundRequestID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");

            entity.HasOne(d => d.Batch).WithMany(p => p.WarehouseOutboundReceipts)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundReceipts_Batch");

            entity.HasOne(d => d.ExportedByNavigation).WithMany(p => p.WarehouseOutboundReceipts)
                .HasForeignKey(d => d.ExportedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundReceipts_Exporter");

            entity.HasOne(d => d.Inventory).WithMany(p => p.WarehouseOutboundReceipts)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundReceipts_Inventory");

            entity.HasOne(d => d.OutboundRequest).WithMany(p => p.WarehouseOutboundReceipts)
                .HasForeignKey(d => d.OutboundRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundReceipts_Request");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseOutboundReceipts)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundReceipts_Warehouse");
        });

        modelBuilder.Entity<WarehouseOutboundRequest>(entity =>
        {
            entity.HasKey(e => e.OutboundRequestId).HasName("PK__Warehous__49E124901A4CCACB");

            entity.HasIndex(e => e.OutboundRequestCode, "UQ__Warehous__DEE1D82267A6F248").IsUnique();

            entity.Property(e => e.OutboundRequestId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OutboundRequestID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");
            entity.Property(e => e.OutboundRequestCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Purpose).HasMaxLength(100);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("pending");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasDefaultValue("kg");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");

            entity.HasOne(d => d.Inventory).WithMany(p => p.WarehouseOutboundRequests)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundRequests_Inventory");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.WarehouseOutboundRequests)
                .HasForeignKey(d => d.OrderItemId)
                .HasConstraintName("FK_WarehouseOutboundRequests_OrderItem");

            entity.HasOne(d => d.RequestedByNavigation).WithMany(p => p.WarehouseOutboundRequests)
                .HasForeignKey(d => d.RequestedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundRequests_Staff");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseOutboundRequests)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseOutboundRequests_Warehouse");
        });

        modelBuilder.Entity<WarehouseReceipt>(entity =>
        {
            entity.HasKey(e => e.ReceiptId).HasName("PK__Warehous__CC08C400D307EC87");

            entity.HasIndex(e => e.ReceiptCode, "UQ__Warehous__1AB76D000EF5DE71").IsUnique();

            entity.Property(e => e.ReceiptId)
                .ValueGeneratedNever()
                .HasColumnName("ReceiptID");
            entity.Property(e => e.BatchId).HasColumnName("BatchID");
            entity.Property(e => e.InboundRequestId).HasColumnName("InboundRequestID");
            entity.Property(e => e.LotCode).HasMaxLength(100);
            entity.Property(e => e.QrcodeUrl)
                .HasMaxLength(255)
                .HasColumnName("QRCodeURL");
            entity.Property(e => e.ReceiptCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedAt).HasColumnType("datetime");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");

            entity.HasOne(d => d.Batch).WithMany(p => p.WarehouseReceipts)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseReceipts_Batch");

            entity.HasOne(d => d.InboundRequest).WithMany(p => p.WarehouseReceipts)
                .HasForeignKey(d => d.InboundRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseReceipts_Request");

            entity.HasOne(d => d.ReceivedByNavigation).WithMany(p => p.WarehouseReceipts)
                .HasForeignKey(d => d.ReceivedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseReceipts_Receiver");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseReceipts)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseReceipts_Warehouse");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}